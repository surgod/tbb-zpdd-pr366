class inherited МашинаРеквизитов.Базовые.интЗапись "";

inclass public

  func СвязанныйКлассЗаписей: class СИС2.Базовая.БазоваяЗапись;
    Result = Отчетность.СИоЗП_ФондЗП;
  end;

  func Create: Отчетность.интФондЗП;
    Result = inherited Create;
    Result.SetRecord(Отчетность.СИоЗП_ФондЗП.Create);
  end;

  func CreateByOwner(locOwnerRecord: Отчетность.СИоЗП;
                     локПериод: ТББ_Базовый.Справочники.ПериодыРасчета;
                     withMsg: logical = false): Отчетность.интФондЗП;
    var locMsg: string;
    var aFlt: string[];
    var locFlt: string;
    var locRecord: Отчетность.СИоЗП_ФондЗП;
    -- Создание новой записи
    -- Поиск существующей записи
    aFlt[1] = 'фСИоЗП=' + Str(locOwnerRecord);
    aFlt[2] = 'ОтчетныйПериод=' + Str(локПериод);
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    locRecord = СИС2.ФункцииДокумента.QueryRecord(Отчетность.СИоЗП_ФондЗП, locFlt);
    if (locRecord <> nil): -- запись существует
      if withMsg:
        locMsg = 'Отчетный период ' + локПериод.Имя + ' уже добавлен в раздел 2 отчета. Повторное добавление не допускается.';
        ТББ_Базовый.Console.Message(locMsg);
      fi;
    else
      Result = Self.Create;
      Result.Record.фСИоЗП = locOwnerRecord;
      Result.Record.ОтчетныйПериод = локПериод;
      Result.Record.Post;
      if withMsg:
        locMsg = 'Создана запись в разделе 2 : ' + локПериод.Имя + '.';
          ТББ_Базовый.Console.Message(locMsg);
      fi;
      СИС2.ФункцииДокумента.RecordPostIfNeed(Result.Record);
    fi;
  end;

  func ОткрытьПоЗаписи synonym OpenRecord (locRecord: Отчетность.СИоЗП_ФондЗП): Отчетность.интФондЗП;
    Result = FindInterfaceByRecord(locRecord);
    if (Result = nil):
      Result = inherited Create;
      Result.SetRecord(locRecord);
    fi;
  end;

  func БланкРедакторПоУмолчанию: class BlankForm;
    Result = ФормыОтчетов.Фонды.редФондЗП;
  end;

  func КартотекаПоУмолчанию: class CardForm;
  end;

inobject public

  var Record: Отчетность.СИоЗП_ФондЗП;
  var интНастройка: Настройки.интСИоЗП;
  var ВидыНачисленийВРасчете: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
  var УказныеНазначения :integer[];--Бюджет_Персонал.АтрибутыСотрудника.Назначение[];

  proc Calc;
    var локВидыБюджета: Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    ПолучитьНастройку;
    локВидыБюджета = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.БюджетыЗП.Федеральный) as Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    Record.РасхОбщФед = ПолучитьСуммуНачислений_Всего(локВидыБюджета);
    Record.РасхКатФед = ПолучитьСуммуНачислений_Указных(локВидыБюджета);
    локВидыБюджета = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.БюджетыЗП.СубъектаРФ) as Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    Record.РасхОбщСуб = ПолучитьСуммуНачислений_Всего(локВидыБюджета);
    Record.РасхКатСуб = ПолучитьСуммуНачислений_Указных(локВидыБюджета);
    локВидыБюджета = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.БюджетыЗП.Муниципальный) as Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    Record.РасхОбщМун = ПолучитьСуммуНачислений_Всего(локВидыБюджета);
    Record.РасхКатМун = ПолучитьСуммуНачислений_Указных(локВидыБюджета);
    локВидыБюджета = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.БюджетыЗП.ОМС) as Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    Record.РасхОбщОМС = ПолучитьСуммуНачислений_Всего(локВидыБюджета);
    Record.РасхКатОМС = ПолучитьСуммуНачислений_Указных(локВидыБюджета);
    локВидыБюджета = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.БюджетыЗП.ИнойБюджет) as Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    Record.РасхОбщИные = ПолучитьСуммуНачислений_Всего(локВидыБюджета);
    Record.РасхКатИные = ПолучитьСуммуНачислений_Указных(локВидыБюджета);
    ПересчетИтогов;
  end;

  proc ПересчетИтогов;
    Record.РасхОбщВсего = Record.РасхОбщФед + Record.РасхОбщСуб + Record.РасхОбщМун + Record.РасхОбщОМС + Record.РасхОбщИные;
    Record.РасхКатВсего = Record.РасхКатФед + Record.РасхКатСуб + Record.РасхКатМун + Record.РасхКатОМС + Record.РасхКатИные;
  end;

inobject private

  --@doc Эта процедура наследует МР; На нее завязано изменение поля Record во всех методах интерфейса;
  proc SetRecord (locRecord: Отчетность.СИоЗП_ФондЗП);
    Inherited SetRecord(locRecord);
    ПолучитьНастройку;
  end;

  proc ПолучитьНастройку; -- при невозможности определить наше учреждение поле интНастройка деинициализируется
    if (Record.фСИоЗП <> nil):
      интНастройка = Настройки.интСИоЗП.OpenForSubject(Record.фСИоЗП.НашеУчреждение);
      ПолучитьВидыНачисленийВРасчете;
      ПолучитьУказныеНазначения;
    else
      интНастройка = nil;
      ВидыНачисленийВРасчете = nil;
      УказныеНазначения = nil;
    fi;
  end;

  proc ПолучитьВидыНачисленийВРасчете;
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    ВидыНачисленийВРасчете = nil;
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.НачисленияТариф) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаСовмещение) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.НачисленияИныеФед) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.НачисленияИныеРег) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.НачисленияПремии) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаСтаж) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаСМ) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаКвалКат) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаУС) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаНаставничество) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаМолодСпец) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ВыплатыИныеСтимул) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ВыплатыПрочие) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ВыплатыКомпенс) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(ВидыНачисленийВРасчете, локВидыНачислений, true);
  end;

  proc ПолучитьУказныеНазначения;
    var QResult: variant[2];
    var мВсеНазначения: Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
    var мУказныеНазначения: Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
    var aFlt: string[];
    var локШифрУН,локШифрН: string;
    var мШифрУН: string[];
    var i: integer;
    УказныеНазначения = nil;
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      aFlt = nil;
      aFlt[1] = 'Расчет.ГруппаНачислений<>"' + Бюджет_ЗпИДД.Константы.ГруппаОперацийДовольствие + '"';
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      QResult = CalcAggregates('GroupBy(Назначение)') as variant[2];
      мВсеНазначения = QResult[1] as Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
    end;
    --
    with Query.Create([Бюджет_Персонал.Справочники.ШтатноеРасписание]) do
      aFlt = nil;
      aFlt[1] = 'ШР=' + Str(интНастройка.Record.ШтатноеРасписание);
      aFlt[2] = 'isGroup=0';
      aFlt[3] = 'ККП<>nil';
      aFlt[4] = 'ККП<>"600"';
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      Select;
      while not Eof do
        локШифрУН = Str((Current as Бюджет_Персонал.Справочники.ШтатноеРасписание).Подразделение.DocID) +
                    '#' +
                    Str((Current as Бюджет_Персонал.Справочники.ШтатноеРасписание).Должность.DocID);
        СИС2.Функции.AddInArray(мШифрУН, локШифрУН, true);
        Next;
      od;
    end;
    --
    for i = 1 .. LengthOfArray(мВсеНазначения) do
      локШифрН = Str(мВсеНазначения[i].Подразделение.DocID) + '#' + Str(мВсеНазначения[i].Должность.DocID);
      if (локШифрН in мШифрУН):
        СИС2.Функции.AddInArray(мУказныеНазначения, мВсеНазначения[i]);
      fi;
    od;
    for i = 1 .. LengthOfArray(мУказныеНазначения) do
      СИС2.Функции.AddInArray(УказныеНазначения, мУказныеНазначения[i].DocId);
    od;
  end;

  func ПолучитьСуммуНачислений_Всего(локВидыБюджета: Бюджет_ЗПиДД.Справочники.ВидыБюджета[]): numeric;
    var aFlt: string[];
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      aFlt[1] = 'Расчет.НашеУчреждение=' + Str(Record.фСИоЗП.НашеУчреждение);
      aFlt[2] = 'SubStr(Расчет.УчетныйПериод.Код,1,4)="' + Str(Record.ОтчетныйПериод.Код) + '"';
      aFlt[3] = 'СуммаКУчету<>0';
      aFlt[4] = 'Расчет.ТипРасчета<>' + Str(Бюджет_ЗПиДД.Константы.ТипРасчетаАванс);
      aFlt[5] = 'Расчет.Подшивка.Завершен';
      aFlt[6] = 'ВидНачисления in ' + Str(ВидыНачисленийВРасчете);
      aFlt[7] = 'Бюджет in ' + Str(локВидыБюджета);
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      Return CalcAggregates('Sum(СуммаКУчету)') as numeric;
    end;
  end;

  func ПолучитьСуммуНачислений_Указных(локВидыБюджета: Бюджет_ЗПиДД.Справочники.ВидыБюджета[]): numeric;
    var aFlt: string[];
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      aFlt[1] = 'Расчет.НашеУчреждение=' + Str(Record.фСИоЗП.НашеУчреждение);
      aFlt[2] = 'SubStr(Расчет.УчетныйПериод.Код,1,4)="' + Str(Record.ОтчетныйПериод.Код) + '"';
      aFlt[3] = 'СуммаКУчету<>0';
      aFlt[4] = 'Расчет.ТипРасчета<>' + Str(Бюджет_ЗПиДД.Константы.ТипРасчетаАванс);
      aFlt[5] = 'Расчет.Подшивка.Завершен';
      aFlt[6] = 'ВидНачисления in ' + Str(ВидыНачисленийВРасчете);
      aFlt[7] = 'Бюджет in ' + Str(локВидыБюджета);
      aFlt[8] = 'Назначение.DocId in ' + Str(УказныеНазначения);
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      Return CalcAggregates('Sum(СуммаКУчету)') as numeric;
    end;
  end;


end