class inherited МашинаРеквизитов.Базовые.интЗапись "";

inclass public

  func СвязанныйКлассЗаписей: class СИС2.Базовая.БазоваяЗапись;
    Result = Отчетность.СИоЗП;
  end;

  func Create: Отчетность.интСИоЗП;
    Result = inherited Create;
    Result.SetRecord(Отчетность.СИоЗП.Create);
  end;

  func ОткрытьПоЗаписи synonym OpenRecord (locRecord: Отчетность.СИоЗП): Отчетность.интСИоЗП;
    Result = FindInterfaceByRecord(locRecord);
    if (Result = nil):
      Result = inherited Create;
      Result.SetRecord(locRecord);
    fi;
  end;

  func БланкРедакторПоУмолчанию: class BlankForm;
    Result = ФормыОтчетов.Фонды.редСИоЗП;
  end;

  func КартотекаПоУмолчанию: class CardForm;
    Result = Отчетность.картСИоЗП;
  end;


inobject public

  Record: Отчетность.СИоЗП;
  var интНастройка: Настройки.интСИоЗП;
  var ВидыНачисленийВРасчете: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];


  proc ВыполнениеРасчета;
    Post;
    РасчетРаздела_1;
    РасчетРаздела_2;
    РасчетРаздела_3;
    Post;
  end;

  proc УдалитьДанные_Разделов (forRecord: Отчетность.СИоЗП = nil);
    УдалитьДанные_Раздел1(forRecord);
    УдалитьДанные_Раздел2(forRecord);
    УдалитьДанные_Раздел3(forRecord);
  end;

  proc УдалитьДанные_Раздел1 (forRecord: Отчетность.СИоЗП = nil);
    var Q: Query;
    Q = Query.Create([Бюджет_ЗПиДД_ПР366.Отчетность.СИоЗП_СЗП]);
    if (forRecord = nil):
      Q.Filter = 'фСИоЗП=' + Str(Self.Record);
    else
      Q.Filter = 'фСИоЗП=' + Str(forRecord);
    fi;
    Q.Select;
    СИС2.ФункцииДокумента.DeleteAllRecords(Q);
  end;

  proc УдалитьДанные_Раздел2 (forRecord: Отчетность.СИоЗП = nil);
    var Q: Query;
    Q = Query.Create([Бюджет_ЗПиДД_ПР366.Отчетность.СИоЗП_ФондЗП]);
    if (forRecord = nil):
      Q.Filter = 'фСИоЗП=' + Str(Self.Record);
    else
      Q.Filter = 'фСИоЗП=' + Str(forRecord);
    fi;
    Q.Select;
    СИС2.ФункцииДокумента.DeleteAllRecords(Q);
  end;

  proc УдалитьДанные_Раздел3 (forRecord: Отчетность.СИоЗП = nil);
    var Q: Query;
    Q = Query.Create([Бюджет_ЗПиДД_ПР366.Отчетность.СИоЗП_СЗПРук]);
    if (forRecord = nil):
      Q.Filter = 'фСИоЗП=' + Str(Self.Record);
    else
      Q.Filter = 'фСИоЗП=' + Str(forRecord);
    fi;
    Q.Select;
    СИС2.ФункцииДокумента.DeleteAllRecords(Q);
  end;

  proc РасчетРаздела_1;
    var m, mm, s, ss, n: integer;
    var локПериод: ТББ_Базовый.Справочники.ПериодыРасчета;
    var мСотрудник: Базовый.Данные.Субъект[];
    var мНазначение: Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
    var интСЗП :Отчетность.интСЗП;
    УдалитьДанные_Раздел1;
    интНастройка = Настройки.интСИоЗП.OpenForSubject(Record.НашеУчреждение);
    ВидыНачисленийВРасчете = интНастройка.ПолучитьВидыНачисленийВРасчете;
    mm = Record.Период_СЗП.Count;
    for m = 1 .. mm do
      локПериод = Record.Период_СЗП[m];
      мСотрудник = ПолучитьСписокСотрудников(локПериод);
      ss = LengthOfArray(мСотрудник);
      for s = 1 .. ss do
        Hint('Расчет раздела 1 : месяц ' + Str(m) + ' из ' + Str(mm) + '...',  s, ss);
        --мНазначение = Бюджет_Персонал.Библио.АктуальныеНазначения(мСотрудник[s], nil, Бюджет_Персонал.Константы.ФормаНазначенияОсн, локПериод.ДатаНачала, локПериод.ДатаОкончания); -- v "A"
        мНазначение = ПолучитьСписокНазначенй(мСотрудник[s], локПериод); -- v "B"
        интСЗП = nil;
        for n = 1 .. LengthOfArray(мНазначение) do
          интСЗП = Отчетность.интСЗП.CreateByOwner(Record, локПериод, мНазначение[n]);
        od;
        if (интСЗП <> nil):
          интСЗП.Calc;
        fi;
      od;
    od;
  end;

inobject private

  func ПолучитьСписокСотрудников (локПериод: ТББ_Базовый.Справочники.ПериодыРасчета): Базовый.Данные.Субъект[];
    var aFlt: string[];
    with Query.Create([Бюджет_Персонал.АтрибутыСотрудника.ПериодРаботы]) do
      aFlt[1] = 'Сотрудник.НашеУчреждение=' + Str(Record.НашеУчреждение);
      aFlt[2] = 'КодГруппыНачислений="' + Бюджет_Персонал.КонстантыГруппНачислений.ГруппаНачисленийЗарплата + '"';
      aFlt[3] = ТББ_Базовый.Фильтры.ФильтрПоДатам(локПериод.ДатаНачала,локПериод.ДатаОкончания);
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      Order = 'Сотрудник.Физлицо.Имя';
      Select;
      while not Eof do
        СИС2.Функции.AddInArray(Result, Current.Сотрудник, true);
        Next;
      od;
    end;
  end;

  -- Назначения исходя из фактических начислений (включая перерасчеты по прежним должностям)
  func ПолучитьСписокНазначенй (локСотрудник: Базовый.Данные.Субъект; локПериод: ТББ_Базовый.Справочники.ПериодыРасчета): Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
    var aFlt: string[];
    var QResult: variant[2];
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      aFlt[1] = 'Назначение.Сотрудник=' + Str(локСотрудник);
      aFlt[2] = 'Расчет.УчетныйПериод.Код="' + Str(локПериод.Код) + '"';
      aFlt[3] = 'СуммаКУчету<>0';
      aFlt[4] = 'Расчет.ТипРасчета<>' + Str(Бюджет_ЗПиДД.Константы.ТипРасчетаАванс);
      aFlt[5] = 'Расчет.Подшивка.Завершен';
      aFlt[6] = 'ВидНачисления in ' + Str(ВидыНачисленийВРасчете);
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      QResult = CalcAggregates('GroupBy(Назначение)') as variant[2];
      Return QResult[1] as Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
    end;
  end;

inobject public

  proc РасчетРаздела_2;
    var y, yy: integer;
    var интФондЗП :Отчетность.интФондЗП;
    УдалитьДанные_Раздел2;
    интНастройка = Настройки.интСИоЗП.OpenForSubject(Record.НашеУчреждение);
    yy = Record.Период_ФондЗП.Count;
    for y = 1 .. yy do
      Hint('Расчет раздела 2 за ' + Record.Период_ФондЗП[y].Имя);
      интФондЗП = Отчетность.интФондЗП.CreateByOwner(Record, Record.Период_ФондЗП[y]);
      if (интФондЗП <> nil):
        интФондЗП.Calc;
      fi;
    od;
  end;

  proc РасчетРаздела_3;
    var y, yy: integer;
    var интСЗПРук :Отчетность.интСЗПРук;
    УдалитьДанные_Раздел3;
    интНастройка = Настройки.интСИоЗП.OpenForSubject(Record.НашеУчреждение);
    yy = Record.Период_СЗПРук.Count;
    for y = 1 .. yy do
      Hint('Расчет раздела 3 за ' + Record.Период_СЗПРук[y].Имя);
      интСЗПРук = Отчетность.интСЗПРук.CreateByOwner(Record, Record.Период_СЗПРук[y]);
      if (интСЗПРук <> nil):
        интСЗПРук.Calc;
      fi;
    od;
  end;


inobject private

  --@doc Эта процедура наследует МР; На нее завязано изменение поля Record во всех методах интерфейса;
  proc SetRecord (locRecord: Отчетность.СИоЗП);
    Inherited SetRecord(locRecord);
    интНастройка = Настройки.интСИоЗП.OpenForSubject(Record.НашеУчреждение);
  end;

end