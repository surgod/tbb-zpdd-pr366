class inherited МашинаРеквизитов.Базовые.интЗапись "";

import Бюджет_Персонал classes Календарь;
import СИС2 classes Функции, ФункцииДокумента;


inclass public

  func СвязанныйКлассЗаписей: class СИС2.Базовая.БазоваяЗапись;
    Result = Отчетность.СИоЗП_СЗПРук;
  end;

  func Create: Отчетность.интСЗПРук;
    Result = inherited Create;
    Result.SetRecord(Отчетность.СИоЗП_СЗПРук.Create);
  end;

  func CreateByOwner(locOwnerRecord: Отчетность.СИоЗП;
                     локПериод: ТББ_Базовый.Справочники.ПериодыРасчета;
                     withMsg: logical = false): Отчетность.интСЗПРук;
    var locMsg: string;
    var aFlt: string[];
    var locFlt: string;
    var locRecord: Отчетность.СИоЗП_СЗПРук;
    -- Создание новой записи
    -- Поиск существующей записи
    aFlt[1] = 'фСИоЗП=' + Str(locOwnerRecord);
    aFlt[2] = 'ОтчетныйПериод=' + Str(локПериод);
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    locRecord = СИС2.ФункцииДокумента.QueryRecord(Отчетность.СИоЗП_СЗПРук, locFlt);
    if (locRecord <> nil): -- запись существует
      if withMsg:
        locMsg = 'Отчетный период ' + локПериод.Имя + ' уже добавлен в раздел 3 отчета. Повторное добавление не допускается.';
        ТББ_Базовый.Console.Message(locMsg);
      fi;
    else
      Result = Self.Create;
      Result.Record.фСИоЗП = locOwnerRecord;
      Result.Record.ОтчетныйПериод = локПериод;
      Result.Record.Post;
      if withMsg:
        locMsg = 'Создана запись в разделе 3 : ' + локПериод.Имя + '.';
          ТББ_Базовый.Console.Message(locMsg);
      fi;
      СИС2.ФункцииДокумента.RecordPostIfNeed(Result.Record);
    fi;
  end;

  func ОткрытьПоЗаписи synonym OpenRecord (locRecord: Отчетность.СИоЗП_СЗПРук): Отчетность.интСЗПРук;
    Result = FindInterfaceByRecord(locRecord);
    if (Result = nil):
      Result = inherited Create;
      Result.SetRecord(locRecord);
    fi;
  end;

  func БланкРедакторПоУмолчанию: class BlankForm;
    Result = ФормыОтчетов.Фонды.редСЗПРук;
  end;

  func КартотекаПоУмолчанию: class CardForm;
  end;

inobject public

  var Record: Отчетность.СИоЗП_СЗПРук;
  var интНастройка: Настройки.интСИоЗП;
  var НазначенияРук :Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
  var НазначенияЗам :Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
  var НазначенияГлБух :Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
  var ШифрыШД: string[]; -- массив шифров штатных должностей сотрудников (не руководителей), включенных в расчет среднесписочной численности
  var НазначенияРаб :integer[];

  proc Calc;
    ПолучитьНастройку;
    Расчет_ЗПРук;
    Расчет_ЗПЗам;
    Расчет_ЗПГлБух;
    Расчет_ЗПРаб;
  end;

  proc Расчет_ЗПРук;
    var i, ii: integer;
    var локПериод :ТББ_Базовый.Справочники.ПериодыРасчета;
    var мПериод :ТББ_Базовый.Справочники.ПериодыРасчета[];
    var СредЗПВсего :numeric;
    Record.ЗПРук.Clear;
    ii = LengthOfArray(НазначенияРук);
    for i = 1 .. ii do
      мПериод = nil;
      with Record.ЗПРук.AddEx do
        Назначение  = НазначенияРук[i];
        RecordPostIfNeed(Record);
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.1.01'); if ПериодВНазначенииПолностью(локПериод,  НазначенияРук[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.1.02'); if ПериодВНазначенииПолностью(локПериод,  НазначенияРук[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.1.03'); if ПериодВНазначенииПолностью(локПериод,  НазначенияРук[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.2.04'); if ПериодВНазначенииПолностью(локПериод,  НазначенияРук[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.2.05'); if ПериодВНазначенииПолностью(локПериод,  НазначенияРук[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.2.06'); if ПериодВНазначенииПолностью(локПериод,  НазначенияРук[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.3.07'); if ПериодВНазначенииПолностью(локПериод,  НазначенияРук[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.3.08'); if ПериодВНазначенииПолностью(локПериод,  НазначенияРук[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.3.09'); if ПериодВНазначенииПолностью(локПериод,  НазначенияРук[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.4.10'); if ПериодВНазначенииПолностью(локПериод,  НазначенияРук[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.4.11'); if ПериодВНазначенииПолностью(локПериод,  НазначенияРук[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.4.12'); if ПериодВНазначенииПолностью(локПериод,  НазначенияРук[i]): AddInArray(мПериод, локПериод); fi;
        WriteStructField(мПериод, ПолнМес); -- запись в структурное поле
        RecordPostIfNeed(Record);
        КолМес    = ПолнМес.Count;
        СуммаЗП   = ПолучитьСуммуНачислений_ВРасчетеСЗ(НазначенияРук[i], мПериод);
        СредЗП    = Round((СуммаЗП / КолМес), 2);
      end;
    od;
    СредЗПВсего = Record.ЗПРук.SumOfField('СредЗП');
    if (ii > 0):
      Record.СредЗПРук = Round((СредЗПВсего / ii), 2);
    else
      Record.СредЗПРук = 0;
    fi;
  end;

  proc Расчет_ЗПЗам;
    var i, ii: integer;
    var локПериод :ТББ_Базовый.Справочники.ПериодыРасчета;
    var мПериод :ТББ_Базовый.Справочники.ПериодыРасчета[];
    var СредЗПВсего :numeric;
    Record.ЗПЗам.Clear;
    ii = LengthOfArray(НазначенияЗам);
    for i = 1 .. ii do
      мПериод = nil;
      with Record.ЗПЗам.AddEx do
        Назначение  = НазначенияЗам[i];
        RecordPostIfNeed(Record);
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.1.01'); if ПериодВНазначенииПолностью(локПериод,  НазначенияЗам[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.1.02'); if ПериодВНазначенииПолностью(локПериод,  НазначенияЗам[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.1.03'); if ПериодВНазначенииПолностью(локПериод,  НазначенияЗам[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.2.04'); if ПериодВНазначенииПолностью(локПериод,  НазначенияЗам[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.2.05'); if ПериодВНазначенииПолностью(локПериод,  НазначенияЗам[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.2.06'); if ПериодВНазначенииПолностью(локПериод,  НазначенияЗам[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.3.07'); if ПериодВНазначенииПолностью(локПериод,  НазначенияЗам[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.3.08'); if ПериодВНазначенииПолностью(локПериод,  НазначенияЗам[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.3.09'); if ПериодВНазначенииПолностью(локПериод,  НазначенияЗам[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.4.10'); if ПериодВНазначенииПолностью(локПериод,  НазначенияЗам[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.4.11'); if ПериодВНазначенииПолностью(локПериод,  НазначенияЗам[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.4.12'); if ПериодВНазначенииПолностью(локПериод,  НазначенияЗам[i]): AddInArray(мПериод, локПериод); fi;
        WriteStructField(мПериод, ПолнМес); -- запись в структурное поле
        RecordPostIfNeed(Record);
        КолМес    = ПолнМес.Count;
        СуммаЗП   = ПолучитьСуммуНачислений_ВРасчетеСЗ(НазначенияЗам[i], мПериод);
        СредЗП    = Round((СуммаЗП / КолМес), 2);
      end;
    od;
    СредЗПВсего = Record.ЗПЗам.SumOfField('СредЗП');
    if (ii > 0):
      Record.СредЗПЗам = Round((СредЗПВсего / ii), 2);
    else
      Record.СредЗПЗам = 0;
    fi;
  end;

  proc Расчет_ЗПГлБух;
    var i, ii: integer;
    var локПериод :ТББ_Базовый.Справочники.ПериодыРасчета;
    var мПериод :ТББ_Базовый.Справочники.ПериодыРасчета[];
    var СредЗПВсего :numeric;
    Record.ЗПГлБух.Clear;
    ii = LengthOfArray(НазначенияГлБух);
    for i = 1 .. ii do
      мПериод = nil;
      with Record.ЗПГлБух.AddEx do
        Назначение  = НазначенияГлБух[i];
        RecordPostIfNeed(Record);
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.1.01'); if ПериодВНазначенииПолностью(локПериод,  НазначенияГлБух[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.1.02'); if ПериодВНазначенииПолностью(локПериод,  НазначенияГлБух[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.1.03'); if ПериодВНазначенииПолностью(локПериод,  НазначенияГлБух[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.2.04'); if ПериодВНазначенииПолностью(локПериод,  НазначенияГлБух[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.2.05'); if ПериодВНазначенииПолностью(локПериод,  НазначенияГлБух[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.2.06'); if ПериодВНазначенииПолностью(локПериод,  НазначенияГлБух[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.3.07'); if ПериодВНазначенииПолностью(локПериод,  НазначенияГлБух[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.3.08'); if ПериодВНазначенииПолностью(локПериод,  НазначенияГлБух[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.3.09'); if ПериодВНазначенииПолностью(локПериод,  НазначенияГлБух[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.4.10'); if ПериодВНазначенииПолностью(локПериод,  НазначенияГлБух[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.4.11'); if ПериодВНазначенииПолностью(локПериод,  НазначенияГлБух[i]): AddInArray(мПериод, локПериод); fi;
        локПериод = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.4.12'); if ПериодВНазначенииПолностью(локПериод,  НазначенияГлБух[i]): AddInArray(мПериод, локПериод); fi;
        WriteStructField(мПериод, ПолнМес); -- запись в структурное поле
        RecordPostIfNeed(Record);
        КолМес    = ПолнМес.Count;
        СуммаЗП   = ПолучитьСуммуНачислений_ВРасчетеСЗ(НазначенияГлБух[i], мПериод);
        СредЗП    = Round((СуммаЗП / КолМес), 2);
      end;
    od;
    СредЗПВсего = Record.ЗПГлБух.SumOfField('СредЗП');
    if (ii > 0):
      Record.СредЗПГлБух = Round((СредЗПВсего / ii), 2);
    else
      Record.СредЗПГлБух = 0;
    fi;
  end;

  func ПериодВНазначенииПолностью(локПериод :ТББ_Базовый.Справочники.ПериодыРасчета; локНазначение :Бюджет_Персонал.АтрибутыСотрудника.Назначение): logical;
    var локНачалоНазначенияВПериоде, локОкончаниеНазначенияВПериоде: logical;
    if (локПериод <> nil) and (локНазначение <> nil):
      if (локНазначение.ДатаНачала <> nil):
        локНачалоНазначенияВПериоде = (локНазначение.ДатаНачала < локПериод.ДатаОкончания) and (локНазначение.ДатаНачала > локПериод.ДатаНачала);
      fi;
      if (локНазначение.ДатаОкончания <> nil):
        локОкончаниеНазначенияВПериоде = (локНазначение.ДатаОкончания < локПериод.ДатаОкончания) and (локНазначение.ДатаОкончания > локПериод.ДатаНачала);
      fi;
      Return not (true in [локНачалоНазначенияВПериоде, локОкончаниеНазначенияВПериоде]);
    else
      Return false;
    fi;
  end;

  func ПолучитьСуммуНачислений_ВРасчетеСЗ(локНазначение: Бюджет_Персонал.АтрибутыСотрудника.Назначение; мПериод: ТББ_Базовый.Справочники.ПериодыРасчета[]): numeric;
    var aFlt: string[];
    var i: integer;
    var locResult: numeric;
    aFlt[1] = 'Назначение=' + Str(локНазначение);
    aFlt[2] = 'СуммаКУчету<>0';
    aFlt[3] = 'Расчет.ТипРасчета<>' + Str(Бюджет_ЗПиДД.Константы.ТипРасчетаАванс);
    aFlt[4] = 'Расчет.Подшивка.Завершен';
    aFlt[5] = 'ВидНачисления.DocId in ' + Str(Бюджет_ЗПиДД.Справочники.НастройкаОперации.КлючиВрасчетеСЗТК);
    for i = 1 .. LengthOfArray(мПериод) do
      aFlt[6] = 'Расчет.УчетныйПериод.Код="' + Str(мПериод[i].Код) + '"';
      with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
        Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
        locResult = CalcAggregates('Sum(СуммаКУчету)') as numeric;
      end;
      Result = Result + locResult;
    od;
  end;

  proc Расчет_ЗПРаб;
    var mm: integer;
    ПолучитьШифрыШД;
    Record.ССЧМ.Clear;
    RecordPostIfNeed(Record);
    with Record.ССЧМ.AddEx do
      ПериодМес = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.1.01'); ССЧ = ВычислитьССЧМ(ПериодМес);
    end;
    with Record.ССЧМ.AddEx do
      ПериодМес = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.1.02'); ССЧ = ВычислитьССЧМ(ПериодМес);
    end;
    with Record.ССЧМ.AddEx do
      ПериодМес = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.1.03'); ССЧ = ВычислитьССЧМ(ПериодМес);
    end;
    with Record.ССЧМ.AddEx do
      ПериодМес = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.2.04'); ССЧ = ВычислитьССЧМ(ПериодМес);
    end;
    with Record.ССЧМ.AddEx do
      ПериодМес = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.2.05'); ССЧ = ВычислитьССЧМ(ПериодМес);
    end;
    with Record.ССЧМ.AddEx do
      ПериодМес = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.2.06'); ССЧ = ВычислитьССЧМ(ПериодМес);
    end;
    with Record.ССЧМ.AddEx do
      ПериодМес = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.3.07'); ССЧ = ВычислитьССЧМ(ПериодМес);
    end;
    with Record.ССЧМ.AddEx do
      ПериодМес = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.3.08'); ССЧ = ВычислитьССЧМ(ПериодМес);
    end;
    with Record.ССЧМ.AddEx do
      ПериодМес = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.3.09'); ССЧ = ВычислитьССЧМ(ПериодМес);
    end;
    with Record.ССЧМ.AddEx do
      ПериодМес = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.4.10'); ССЧ = ВычислитьССЧМ(ПериодМес);
    end;
    with Record.ССЧМ.AddEx do
      ПериодМес = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.4.11'); ССЧ = ВычислитьССЧМ(ПериодМес);
    end;
    with Record.ССЧМ.AddEx do
      ПериодМес = ПериодПоКоду(Record.ОтчетныйПериод.Код + '.4.12'); ССЧ = ВычислитьССЧМ(ПериодМес);
    end;
    RecordPostIfNeed(Record);
    mm = Record.ССЧМ.Count;
    if (mm > 0):
      Record.ССЧ = Round((Record.ССЧМ.SumOfField('ССЧ') / mm), 2);
      Record.СуммаЗП = ПолучитьСуммуНачислений_ВРасчетеСЗРаб;
      if (Record.ССЧ > 0):
        Record.СредЗПРаб = Round(((Record.СуммаЗП / Record.ССЧ) / mm), 2);
      else
        Record.СредЗПРаб = 0;
      fi;
    else
      Record.ССЧ = 0;
      Record.СуммаЗП = 0;
      Record.СредЗПРаб = 0;
    fi;
  end;

  func ВычислитьССЧМ (локПериод :ТББ_Базовый.Справочники.ПериодыРасчета): numeric;
    var d: date;
    var i: integer;
    var СЧД: numeric[]; -- списочная численность по дням
    d = локПериод.ДатаНачала;
    while (d <= локПериод.ДатаОкончания) do
      i = i + 1;
      СЧД[i] = Бюджет_Персонал.Библио.Численность_Списочная(d, интНастройка.Record.НашеУчреждение, , , , ШифрыШД);
      d = d + 1;
    end;
    if (i > 0):
      Result = SumOfArray(СЧД) / i;
      Result = Round(Result, 2);
    fi;
  end;

inobject private

  --@doc Эта процедура наследует МР; На нее завязано изменение поля Record во всех методах интерфейса;
  proc SetRecord (locRecord: Отчетность.СИоЗП_СЗПРук);
    Inherited SetRecord(locRecord);
    ПолучитьНастройку;
  end;

  proc ПолучитьНастройку; -- при невозможности определить наше учреждение поле интНастройка деинициализируется
    if (Record.фСИоЗП <> nil):
      интНастройка = Настройки.интСИоЗП.OpenForSubject(Record.фСИоЗП.НашеУчреждение);
      ПолучитьНазначенияРук;
      ПолучитьНазначенияЗам;
      ПолучитьНазначенияГлБух;
      ПолучитьШифрыШД;
    else
      интНастройка = nil;
      НазначенияРук = nil;
      НазначенияЗам = nil;
      НазначенияГлБух = nil;
      ШифрыШД = nil;
      НазначенияРаб = nil;
    fi;
  end;

  proc ПолучитьНазначенияРук;
    var мРоль: Базовый.Справочники.РольСубъекта[];
    var aFlt: string[];
    var QResult: variant[2];
    НазначенияРук = nil;
    мРоль = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ДолжностиРуководства.Рук) as Базовый.Справочники.РольСубъекта[];
    -- Список назначений по массиву должностей с ненулевыми начислениями
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      aFlt = nil;
      aFlt[1] = 'Расчет.ГруппаНачислений="' + Бюджет_ЗпИДД.Константы.ГруппаОперацийЗарплата + '"';
      aFlt[2] = 'SubStr(Расчет.УчетныйПериод.Код,1,4)="' + Str(Record.ОтчетныйПериод.Код) + '"';
      aFlt[3] = 'СуммаКУчету<>0';
      aFlt[4] = 'Расчет.ТипРасчета<>' + Str(Бюджет_ЗПиДД.Константы.ТипРасчетаАванс);
      aFlt[5] = 'Расчет.Подшивка.Завершен';
      aFlt[6] = 'Назначение.Должность in ' + Str(мРоль);
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      QResult = CalcAggregates('GroupBy(Назначение)') as variant[2];
      НазначенияРук = QResult[1] as Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
    end;
  end;

  proc ПолучитьНазначенияЗам;
    var мРоль: Базовый.Справочники.РольСубъекта[];
    var aFlt: string[];
    var QResult: variant[2];
    НазначенияЗам = nil;
    мРоль = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ДолжностиРуководства.Зам) as Базовый.Справочники.РольСубъекта[];
    -- Список назначений по массиву должностей с ненулевыми начислениями
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      aFlt = nil;
      aFlt[1] = 'Расчет.ГруппаНачислений="' + Бюджет_ЗпИДД.Константы.ГруппаОперацийЗарплата + '"';
      aFlt[2] = 'SubStr(Расчет.УчетныйПериод.Код,1,4)="' + Str(Record.ОтчетныйПериод.Код) + '"';
      aFlt[3] = 'СуммаКУчету<>0';
      aFlt[4] = 'Расчет.ТипРасчета<>' + Str(Бюджет_ЗПиДД.Константы.ТипРасчетаАванс);
      aFlt[5] = 'Расчет.Подшивка.Завершен';
      aFlt[6] = 'Назначение.Должность in ' + Str(мРоль);
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      QResult = CalcAggregates('GroupBy(Назначение)') as variant[2];
      НазначенияЗам = QResult[1] as Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
    end;
  end;

  proc ПолучитьНазначенияГлБух;
    var мРоль: Базовый.Справочники.РольСубъекта[];
    var aFlt: string[];
    var QResult: variant[2];
    НазначенияГлБух = nil;
    мРоль = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ДолжностиРуководства.ГлБух) as Базовый.Справочники.РольСубъекта[];
    -- Список назначений по массиву должностей с ненулевыми начислениями
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      aFlt = nil;
      aFlt[1] = 'Расчет.ГруппаНачислений="' + Бюджет_ЗпИДД.Константы.ГруппаОперацийЗарплата + '"';
      aFlt[2] = 'SubStr(Расчет.УчетныйПериод.Код,1,4)="' + Str(Record.ОтчетныйПериод.Код) + '"';
      aFlt[3] = 'СуммаКУчету<>0';
      aFlt[4] = 'Расчет.ТипРасчета<>' + Str(Бюджет_ЗПиДД.Константы.ТипРасчетаАванс);
      aFlt[5] = 'Расчет.Подшивка.Завершен';
      aFlt[6] = 'Назначение.Должность in ' + Str(мРоль);
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      QResult = CalcAggregates('GroupBy(Назначение)') as variant[2];
      НазначенияГлБух = QResult[1] as Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
    end;
  end;

  proc ПолучитьШифрыШД;
    var aFlt: string[];
    var QResult: variant[2];
    var мНазначение :Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
    var i: integer;
    var локШифрШД: string;
    НазначенияРаб = nil;
    ШифрыШД = nil;
    -- Список назначений
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      aFlt = nil;
      aFlt[1] = 'Расчет.ГруппаНачислений="' + Бюджет_ЗпИДД.Константы.ГруппаОперацийЗарплата + '"';
      aFlt[2] = 'SubStr(Расчет.УчетныйПериод.Код,1,4)="' + Str(Record.ОтчетныйПериод.Код) + '"';
      aFlt[3] = 'СуммаКУчету<>0';
      aFlt[4] = 'Расчет.ТипРасчета<>' + Str(Бюджет_ЗПиДД.Константы.ТипРасчетаАванс);
      aFlt[5] = 'Расчет.Подшивка.Завершен';
      aFlt[6] = 'not Назначение in ' + Str(НазначенияРук);
      aFlt[7] = 'not Назначение in ' + Str(НазначенияЗам);
      aFlt[8] = 'not Назначение in ' + Str(НазначенияГлБух);
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      QResult = CalcAggregates('GroupBy(Назначение)') as variant[2];
      мНазначение = QResult[1] as Бюджет_Персонал.АтрибутыСотрудника.Назначение[];
    end;
    for i = 1 .. LengthOfArray(мНазначение) do
      AddInArray(НазначенияРаб, мНазначение[i].DocId, true);
      локШифрШД = Str(мНазначение[i].Подразделение.DocId) + '#' + Str(мНазначение[i].Должность.DocId);
      AddInArray(ШифрыШД, локШифрШД, true);
    od;
  end;

  func ПолучитьСуммуНачислений_ВРасчетеСЗРаб: numeric;
    var aFlt: string[];
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      aFlt[1] = 'Назначение.DocId in ' + Str(НазначенияРаб);
      aFlt[2] = 'СуммаКУчету<>0';
      aFlt[3] = 'Расчет.ТипРасчета<>' + Str(Бюджет_ЗПиДД.Константы.ТипРасчетаАванс);
      aFlt[4] = 'Расчет.Подшивка.Завершен';
      aFlt[5] = 'ВидНачисления.DocId in ' + Str(Бюджет_ЗПиДД.Справочники.НастройкаОперации.КлючиВрасчетеСЗТК);
      aFlt[6] = 'SubStr(Расчет.УчетныйПериод.Код,1,4)="' + Str(Record.ОтчетныйПериод.Код) + '"';
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      Result = CalcAggregates('Sum(СуммаКУчету)') as numeric;
    end;
  end;

end