class inherited МашинаРеквизитов.Базовые.интЗапись "";

inclass public

  func СвязанныйКлассЗаписей: class СИС2.Базовая.БазоваяЗапись;
    Result = Отчетность.СИоЗП_СЗП;
  end;

  func Create: Отчетность.интСЗП;
    Result = inherited Create;
    Result.SetRecord(Отчетность.СИоЗП_СЗП.Create);
  end;

  func CreateByOwner(locOwnerRecord: Отчетность.СИоЗП;
                     локПериод: ТББ_Базовый.Справочники.ПериодыРасчета;
                     локНазначение  :Бюджет_Персонал.АтрибутыСотрудника.Назначение;
                     withMsg: logical = false): Отчетность.интСЗП;
    var locMsg: string;
    var aFlt: string[];
    var locFlt: string;
    var locRecord: Отчетность.СИоЗП_СЗП;
    -- Создание новой записи или добавленние должности в существующую
    -- Поиск существующей записи
    aFlt[1] = 'фСИоЗП=' + Str(locOwnerRecord);
    aFlt[2] = 'ОтчетныйПериод=' + Str(локПериод);
    aFlt[3] = 'Работник=' + Str(локНазначение.Сотрудник.ФизЛицо);
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    locRecord = СИС2.ФункцииДокумента.QueryRecord(Отчетность.СИоЗП_СЗП, locFlt);
    if (locRecord <> nil): -- запись существует
      with locRecord.СЗПД.AddEx do
        Назначение = локНазначение;
        if withMsg:
          locMsg = 'Должность "' + локНазначение.Должность.Имя + ' добавлена в отчетную карточку сотрудника ' + локНазначение.Сотрудник.Физлицо.Имя + '.';
          ТББ_Базовый.Console.Message(locMsg);
        fi;
        СИС2.ФункцииДокумента.RecordPostIfNeed(locRecord);
        Return OpenRecord(locRecord);
      end;
    else
      Result = Self.Create;
      Result.Record.фСИоЗП = locOwnerRecord;
      Result.Record.ОтчетныйПериод = локПериод;
      Result.Record.Работник = локНазначение.Сотрудник.Физлицо;
      Result.Record.Post;
      with Result.Record.СЗПД.AddEx do
        Назначение = локНазначение;
        if withMsg:
          locMsg = 'Создана отчетная карточка сотрудника ' + локНазначение.Сотрудник.Физлицо.Имя + '.';
          ТББ_Базовый.Console.Message(locMsg);
        fi;
        СИС2.ФункцииДокумента.RecordPostIfNeed(Result.Record);
      end;
    fi;
  end;

  func ОткрытьПоЗаписи synonym OpenRecord (locRecord: Отчетность.СИоЗП_СЗП): Отчетность.интСЗП;
    Result = FindInterfaceByRecord(locRecord);
    if (Result = nil):
      Result = inherited Create;
      Result.SetRecord(locRecord);
    fi;
  end;

  func БланкРедакторПоУмолчанию: class BlankForm;
    Result = ФормыОтчетов.Фонды.редСЗП;
  end;

  func КартотекаПоУмолчанию: class CardForm;
    --Result = Отчетность.картСИоЗП;
  end;

inobject public

  var Record: Отчетность.СИоЗП_СЗП;
  var интНастройка: Настройки.интСИоЗП;


  proc Calc;
    var aFlt: string[];
    var локСтажНаДату: Бюджет_Персонал.Стаж.НаДату;
    var локИзмерительСтажа: integer[];
    var локДатаЗапросаСтажа: date;
    var i: integer;
    var локШтатнаяДолжность: Бюджет_Персонал.Справочники.ШтатноеРасписание;
    var локККП, локКодФормыЗачисления, локОут: string;
    var локСтавка, локЧасы: numeric;
    var локТабель: Бюджет_Персонал.Табель.Назначения;
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var локВидыРолей1, локВидыРолей2, локВидыРолей3: Базовый.Справочники.РольСубъекта[];
    if (Record.Работник <> nil):
      Record.Фамилия  = Record.Работник.ФамилияФизлица;
      Record.Имя      = Record.Работник.ИмяФизлица;
      Record.Отчество = Record.Работник.ОтчествоФизлица;
      Record.СНИЛС    = Record.Работник.НомерПФР;
      if (интНастройка <> nil):
        -- (9 - стаж общий) --
        if (интНастройка.ТипСтажа_Общий <> nil):
          with Query.Create([Бюджет_Персонал.АтрибутыСотрудника.Стаж]) do
            aFlt = nil;
            aFlt[1] = 'ФизЛицо=' + Str(Record.Работник);
            aFlt[2] = 'ТипСтажа=' + Str(интНастройка.ТипСтажа_Общий);
            Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
            Order = 'ДатаНачала-';
            Select;
            if RecordsExists:
              локИзмерительСтажа = [Current.Лет, Current.Месяцев, Current.Дней] as integer[];
              локСтажНаДату = Бюджет_Персонал.Стаж.НаДату.CreateEx(интНастройка.ТипСтажа_Общий, Current.ДатаНачала, локИзмерительСтажа);
              локДатаЗапросаСтажа = Record.ОтчетныйПериод.ДатаНачала;
              локСтажНаДату = Бюджет_Персонал.Стаж.Методы.ПересчитатьСтажНаДату(локСтажНаДату, локДатаЗапросаСтажа, Current.Коэффициент);
              Record.ОбщийСтаж = локСтажНаДату.ИзмерительСтажа[1];
            fi;
          end;
        fi;
        ----------------
        for i = 1 .. Record.СЗПД.Count do
          -- (10) --
          Record.СЗПД[i].Должность = Record.СЗПД[i].Назначение.Должность.Имя;
          -- (11) --
          локККП = nil;
          локШтатнаяДолжность = ПолучитьШтатнуюДолжность(i);
          if (локШтатнаяДолжность <> nil):
            локККП = локШтатнаяДолжность.ККП;
          fi;
          локККП = if(локККП=nil, '600', локККП);
          Record.СЗПД[i].ККП = локККП;
          -- (12) --
          локКодФормыЗачисления = nil;
          if (Record.СЗПД[i].Назначение.ПериодРаботы.ФормаЗачисления <> nil):
            локКодФормыЗачисления = Record.СЗПД[i].Назначение.ПериодРаботы.ФормаЗачисления.Код;
          fi;
          if (локКодФормыЗачисления = Бюджет_Персонал.Константы.КодФормыЗачисления_Штат):
            Record.СЗПД[i].УсловиеЗанятости = 1;
          elsif (локКодФормыЗачисления = Бюджет_Персонал.Константы.КодФормыЗачисления_СовместительствоВнешнее):
            Record.СЗПД[i].УсловиеЗанятости = 2;
          elsif (локКодФормыЗачисления = Бюджет_Персонал.Константы.КодФормыЗачисления_СовместительствоВнутреннее):
            Record.СЗПД[i].УсловиеЗанятости = 3;
          else
            Record.СЗПД[i].УсловиеЗанятости = 0;
          fi;
          -- (13) --
          локСтавка = Record.СЗПД[i].Назначение.КолСтавок;
          if (локСтавка = 0):
            локСтавка = 1;
          fi;
          Record.СЗПД[i].Ставка = Round(локСтавка, 3);
          -- (14,15) --
          локТабель = Бюджет_Персонал.Табель.Назначения.CreateExt(Record.СЗПД[i].Назначение, Record.ОтчетныйПериод);
          локЧасы = локТабель.НормаЧасов; #Warning 'Учитывать ставку при расчет нормы часов?';
          Record.СЗПД[i].РабВремяНорма = Round(локЧасы, 2);
          with Бюджет_Персонал.Константы do
            локЧасы = локТабель.ЧасовПоТипу([ТипВремени_ФактРабота,ТипВремени_НеРабота]);
            Record.СЗПД[i].РабВремяФакт = Round(локЧасы, 2);
          end;
          -- (16)--
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.НачисленияТариф) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].НачисленияТариф = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (17) --
          локОут = Бюджет_ЗПиДД.Библио.ОценкаСОУТДолжностиНаДату(Record.СЗПД[i].Назначение, Record.ОтчетныйПериод.ДатаНачала);
          локОут = SubStr(локОут, 2);
          Record.СЗПД[i].ОУТ = локОут;
          -- (18 - расчет ниже) --
          -- (19) --
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаСовмещение) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].ДоплатаСовмещение = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (20) --
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.НачисленияИныеФед) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].НачисленияИныеФед = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (21) --
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.НачисленияИныеРег) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].НачисленияИныеРег = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (22) --
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.НачисленияПремии) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].НачисленияПремии = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (23 - стаж для надбавки) --
          if (интНастройка.ТипСтажа_Общий <> nil):
            with Query.Create([Бюджет_Персонал.АтрибутыСотрудника.Стаж]) do
              aFlt = nil;
              aFlt[1] = 'ФизЛицо=' + Str(Record.Работник);
              aFlt[2] = 'ТипСтажа=' + Str(интНастройка.ТипСтажа_Непрерывный);
              Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
              Order = 'ДатаНачала-';
              Select;
              if RecordsExists:
                локИзмерительСтажа = [Current.Лет, Current.Месяцев, Current.Дней] as integer[];
                локСтажНаДату = Бюджет_Персонал.Стаж.НаДату.CreateEx(интНастройка.ТипСтажа_Общий, Current.ДатаНачала, локИзмерительСтажа);
                локДатаЗапросаСтажа = Record.ОтчетныйПериод.ДатаНачала;
                локСтажНаДату = Бюджет_Персонал.Стаж.Методы.ПересчитатьСтажНаДату(локСтажНаДату, локДатаЗапросаСтажа, Current.Коэффициент);
                Record.СЗПД[i].НепрерывныйСтаж = Str(локСтажНаДату.ИзмерительСтажа[1], '00') + '.' + Str(локСтажНаДату.ИзмерительСтажа[2], '00');
              else
                Record.СЗПД[i].НепрерывныйСтаж = 'н/д';
              fi;
            end;
          fi;
          -- (24) --
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаСтаж) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].ДоплатаСтаж = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (25) --
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаСМ) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].ДоплатаСМ = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (26) --
          Record.СЗПД[i].КвалКатегория = nil;
          with Query.Create([Бюджет_Персонал.АтрибутыФизлица.Роль]) do
            aFlt = nil;
            aFlt[1] = 'Роль.ЭтоДолжность = ' + Str(ТББ_Базовый.КонстантыРолей.рольКвалификация);
            aFlt[2] = 'ФизЛицо=' + Str(Record.Работник);
            Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
            Order = 'ДатаНачала-';
            Select;
            if RecordsExists:
              локВидыРолей1 = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.КвалКатегории.Первая) as Базовый.Справочники.РольСубъекта[];
              локВидыРолей2 = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.КвалКатегории.Вторая) as Базовый.Справочники.РольСубъекта[];
              локВидыРолей3 = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.КвалКатегории.Высшая) as Базовый.Справочники.РольСубъекта[];
              if (Current as Бюджет_Персонал.АтрибутыФизлица.Роль).Роль in локВидыРолей1:
                Record.СЗПД[i].КвалКатегория = 1;
              elsif (Current as Бюджет_Персонал.АтрибутыФизлица.Роль).Роль in локВидыРолей2:
                Record.СЗПД[i].КвалКатегория = 2;
              elsif (Current as Бюджет_Персонал.АтрибутыФизлица.Роль).Роль in локВидыРолей3:
                Record.СЗПД[i].КвалКатегория = 3;
              fi;
            fi;
          end;
          -- (27) --
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаКвалКат) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].ДоплатаКвалКат = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (28) --
          Record.СЗПД[i].УченаяСтепень = nil;
          with Query.Create([Бюджет_Персонал.АтрибутыФизлица.Роль]) do
            aFlt = nil;
            aFlt[1] = 'Роль.ЭтоДолжность = ' + Str(ТББ_Базовый.КонстантыРолей.рольУчСтепень);
            aFlt[2] = 'ФизЛицо=' + Str(Record.Работник);
            Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
            Order = 'ДатаНачала-';
            Select;
            if RecordsExists:
              локВидыРолей1 = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.УчСтепени.КН) as Базовый.Справочники.РольСубъекта[];
              локВидыРолей2 = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.УчСтепени.ДН) as Базовый.Справочники.РольСубъекта[];
              if (Current as Бюджет_Персонал.АтрибутыФизлица.Роль).Роль in локВидыРолей1:
                Record.СЗПД[i].УченаяСтепень = 1;
              elsif (Current as Бюджет_Персонал.АтрибутыФизлица.Роль).Роль in локВидыРолей2:
                Record.СЗПД[i].УченаяСтепень = 2;
              fi;
            fi;
          end;
          -- (29) --
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаУС) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].ДоплатаУС = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (30) --
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаНаставничество) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].ДоплатаНаставничество = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (31) --
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаМолодСпец) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].ДоплатаМолодСпец = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (32) --
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ВыплатыИныеСтимул) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].ВыплатыИныеСтимул = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (33) --
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ВыплатыПрочие) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].ВыплатыПрочие = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (34) --
          локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ВыплатыКомпенс) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
          Record.СЗПД[i].ВыплатыКомпенс = ПолучитьСуммуНачислений(i, локВидыНачислений);
          -- (35) --
          Record.СЗПД[i].НачисленияИтого = Record.СЗПД[i].НачисленияТариф +       --(16)
                                           Record.СЗПД[i].ДоплатаСовмещение +     --(19)
                                           Record.СЗПД[i].НачисленияИныеФед +     --(20)
                                           Record.СЗПД[i].НачисленияИныеРег +     --(21)
                                           Record.СЗПД[i].НачисленияПремии +      --(22)
                                           Record.СЗПД[i].ДоплатаСтаж +           --(24)
                                           Record.СЗПД[i].ДоплатаСМ +             --(25)
                                           Record.СЗПД[i].ДоплатаКвалКат +        --(27)
                                           Record.СЗПД[i].ДоплатаУС +             --(29)
                                           Record.СЗПД[i].ДоплатаНаставничество + --(30)
                                           Record.СЗПД[i].ДоплатаМолодСпец +      --(31)
                                           Record.СЗПД[i].ВыплатыИныеСтимул +     --(32)
                                           Record.СЗПД[i].ВыплатыПрочие +         --(33)
                                           Record.СЗПД[i].ВыплатыКомпенс;         --(34)
          -- (18 ) --
          if Record.СЗПД[i].ОУТ = локОут:
            Record.СЗПД[i].НачисленияОУТ = Record.СЗПД[i].НачисленияИтого;
          fi;
        od;
      fi;
    fi;
  end;

  func ПолучитьШтатнуюДолжность(Index: integer): Бюджет_Персонал.Справочники.ШтатноеРасписание;
    var aFlt: string[];
    var locFlt: string;
    with Query.Create([Бюджет_Персонал.Справочники.ШтатноеРасписание]) do
      aFlt[1] = 'ШР=' + Str(интНастройка.Record.ШтатноеРасписание);
      aFlt[2] = 'Подразделение=' + Str(Record.СЗПД[Index].Назначение.Подразделение);
      aFlt[3] = 'Должность=' + Str(Record.СЗПД[Index].Назначение.Должность);
      locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      Return СИС2.ФункцииДокумента.QueryRecord(Бюджет_Персонал.Справочники.ШтатноеРасписание, locFlt);
    end;
  end;

  func ПолучитьСуммуНачислений(Index: integer; локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[]): numeric;
    var aFlt: string[];
    var locFlt: string;
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      aFlt[1] = 'Назначение=' + Str(Record.СЗПД[Index].Назначение);
      aFlt[2] = 'Расчет.УчетныйПериод.Код="' + Str(Record.ОтчетныйПериод.Код) + '"';
      aFlt[3] = 'СуммаКУчету<>0';
      aFlt[4] = 'Расчет.ТипРасчета<>' + Str(Бюджет_ЗПиДД.Константы.ТипРасчетаАванс);
      aFlt[5] = 'Расчет.Подшивка.Завершен';
      aFlt[6] = 'ВидНачисления in ' + Str(локВидыНачислений);
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      Return CalcAggregates('Sum(СуммаКУчету)') as numeric;
    end;
  end;


inobject private

  --@doc Эта процедура наследует МР; На нее завязано изменение поля Record во всех методах интерфейса;
  proc SetRecord (locRecord: Отчетность.СИоЗП_СЗП);
    Inherited SetRecord(locRecord);
    интНастройка = Настройки.интСИоЗП.OpenForSubject(Record.фСИоЗП.НашеУчреждение);
  end;

end