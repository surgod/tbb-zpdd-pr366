class inherited МашинаРеквизитов.Базовые.интЗапись "";

inclass public

  func СвязанныйКлассЗаписей: class СИС2.Базовая.БазоваяЗапись;
    Result = Отчетность.СИоЗП_СЗП;
  end;

  func Create: Отчетность.интСЗП;
    Result = inherited Create;
    Result.SetRecord(Отчетность.СИоЗП_СЗП.Create);
  end;

  func CreateByOwner(locOwnerRecord: Отчетность.СИоЗП;
                     локПериод: ТББ_Базовый.Справочники.ПериодыРасчета;
                     локНазначение  :Бюджет_Персонал.АтрибутыСотрудника.Назначение;
                     withMsg: logical = false): Отчетность.интСЗП;
    var locMsg: string;
    var aFlt: string[];
    var locFlt: string;
    var locRecord: Отчетность.СИоЗП_СЗП;
    var мНазначение :Бюджет_Персонал.АтрибутыСотрудника.Назначение[]; -- введенные назначения
    var i, ii: integer;
    -- Создание новой записи или добавленние должности в существующую
    -- Поиск существующей записи
    aFlt[1] = 'фСИоЗП=' + Str(locOwnerRecord);
    aFlt[2] = 'ОтчетныйПериод=' + Str(локПериод);
    aFlt[3] = 'Работник=' + Str(локНазначение.Сотрудник.ФизЛицо);
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    locRecord = СИС2.ФункцииДокумента.QueryRecord(Отчетность.СИоЗП_СЗП, locFlt);
    if (locRecord <> nil): -- запись существует
      ii = locRecord.СЗПД.Count;
      for i = 1 ..ii do
       СИС2.Функции.AddInArray(мНазначение, locRecord.СЗПД[i].Назначение);
      od;
      if not (локНазначение in мНазначение):
        with locRecord.СЗПД.AddEx do
          Назначение = локНазначение;
          if withMsg:
            locMsg = 'Должность "' + локНазначение.Должность.Имя + ' добавлена в отчетную карточку сотрудника ' + локНазначение.Сотрудник.Физлицо.Имя + '.';
            ТББ_Базовый.Console.Message(locMsg);
          fi;
          СИС2.ФункцииДокумента.RecordPostIfNeed(locRecord);
          Return OpenRecord(locRecord);
        end;
      else
        if withMsg:
          locMsg = 'Должность "' + локНазначение.Должность.Имя + ' уже добавлена в отчетную карточку сотрудника ' + локНазначение.Сотрудник.Физлицо.Имя + '. Повторное добавление не допускается.';
          ТББ_Базовый.Console.Message(locMsg);
        fi;
      fi;
    else
      Result = Self.Create;
      Result.Record.фСИоЗП = locOwnerRecord;
      Result.Record.ОтчетныйПериод = локПериод;
      Result.Record.Работник = локНазначение.Сотрудник.Физлицо;
      Result.Record.Post;
      with Result.Record.СЗПД.AddEx do
        Назначение = локНазначение;
        if withMsg:
          locMsg = 'Создана отчетная карточка сотрудника ' + локНазначение.Сотрудник.Физлицо.Имя + '.';
          ТББ_Базовый.Console.Message(locMsg);
        fi;
        СИС2.ФункцииДокумента.RecordPostIfNeed(Result.Record);
      end;
    fi;
  end;

  func ОткрытьПоЗаписи synonym OpenRecord (locRecord: Отчетность.СИоЗП_СЗП): Отчетность.интСЗП;
    Result = FindInterfaceByRecord(locRecord);
    if (Result = nil):
      Result = inherited Create;
      Result.SetRecord(locRecord);
    fi;
  end;

  func БланкРедакторПоУмолчанию: class BlankForm;
    Result = ФормыОтчетов.Фонды.редСЗП;
  end;

  func КартотекаПоУмолчанию: class CardForm;
    --Result = Отчетность.картСИоЗП;
  end;

inobject public

  var Record: Отчетность.СИоЗП_СЗП;
  var интНастройка: Настройки.интСИоЗП;

  proc Calc;
    var i: integer;
    if (Record.Работник <> nil):
      Вычислить_РеквизитыРаботника;
      ПолучитьНастройку;
      if (интНастройка <> nil):
        Вычислить_СтажОбщий; -- (9) - стаж "общий"
        ----------------
        for i = 1 .. Record.СЗПД.Count do
          Вычислить_ИмяДолжности(i);          -- (10)
          Вычислить_ККП(i);                   -- (11)
          Вычислить_УсловиеЗанятости(i);      -- (12)
          Вычислить_Ставку(i);                -- (13)
          Вычислить_Часы(i);                  -- (14, 15)
          Вычислить_НачисленияТариф(i);       -- (16)
          Вычислить_ОУТ(i);                   -- (17)
          --                                  -- (18 - расчет ниже) --
          Вычислить_ДоплатаСовмещение(i);     -- (19)
          Вычислить_НачисленияИныеФед(i);     -- (20)
          Вычислить_НачисленияИныеРег(i);     -- (21)
          Вычислить_НачисленияПремии(i);      -- (22)
          Вычислить_СтажДляНадбавки(i);       -- (23) -- "непрерывный"
          Вычислить_ДоплатаСтаж(i);           -- (24)
          Вычислить_ДоплатаСМ(i);             -- (25)
          Вычислить_КвалКатегорию(i);         -- (26)
          Вычислить_ДоплатаКвалКат(i);        -- (27)
          Вычислить_УченуюСтепень(i);         -- (28)
          Вычислить_ДоплатаУС(i);             -- (29)
          Вычислить_ДоплатаНаставничество(i); -- (30)
          Вычислить_ДоплатаМолодСпец(i);      -- (31)
          Вычислить_ВыплатыИныеСтимул(i);     -- (32)
          Вычислить_ВыплатыПрочие(i);         -- (33)
          Вычислить_ВыплатыКомпенс(i);        -- (34)
          Вычислить_НачисленияИтого(i);       -- (35)
          Вычислить_НачисленияОУТ(i);         -- (18)
        od;
        Вычислить_НачисленияВсего;
      fi;
      Post;
    fi;
  end;

inobject private

  proc Вычислить_РеквизитыРаботника;
    Record.Фамилия  = Record.Работник.ФамилияФизлица;
    Record.Имя      = Record.Работник.ИмяФизлица;
    Record.Отчество = Record.Работник.ОтчествоФизлица;
    Record.СНИЛС    = Record.Работник.НомерПФР;
  end;

  proc Вычислить_СтажОбщий;
    var aFlt: string[];
    var локСтажНаДату: Бюджет_Персонал.Стаж.НаДату;
    var локИзмерительСтажа: integer[];
    var локДатаЗапросаСтажа: date;
    if (интНастройка.ТипСтажа_Общий <> nil):
      with Query.Create([Бюджет_Персонал.АтрибутыСотрудника.Стаж]) do
        aFlt = nil;
        aFlt[1] = 'ФизЛицо=' + Str(Record.Работник);
        aFlt[2] = 'ТипСтажа=' + Str(интНастройка.ТипСтажа_Общий);
        Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
        Order = 'ДатаНачала-';
        Select;
        if RecordsExists:
          локИзмерительСтажа = [Current.Лет, Current.Месяцев, Current.Дней] as integer[];
          локСтажНаДату = Бюджет_Персонал.Стаж.НаДату.CreateEx(интНастройка.ТипСтажа_Общий, Current.ДатаНачала, локИзмерительСтажа);
          локДатаЗапросаСтажа = Record.ОтчетныйПериод.ДатаНачала;
          локСтажНаДату = Бюджет_Персонал.Стаж.Методы.ПересчитатьСтажНаДату(локСтажНаДату, локДатаЗапросаСтажа, Current.Коэффициент);
          Record.ОбщийСтаж = локСтажНаДату.ИзмерительСтажа[1];
        fi;
      end;
    fi;
  end;

  proc Вычислить_ИмяДолжности(Index: integer);
    Record.СЗПД[Index].Должность = Record.СЗПД[Index].Назначение.Должность.Имя;
  end;

  proc Вычислить_ККП(Index: integer);
    var локШтатнаяДолжность: Бюджет_Персонал.Справочники.ШтатноеРасписание;
    var локККП: string;
    локШтатнаяДолжность = ПолучитьШтатнуюДолжность(Index);
    if (локШтатнаяДолжность <> nil):
      локККП = локШтатнаяДолжность.ККП;
    fi;
    локККП = if(локККП=nil, '600', локККП);
    Record.СЗПД[Index].ККП = локККП;
  end;

  func ПолучитьШтатнуюДолжность(Index: integer): Бюджет_Персонал.Справочники.ШтатноеРасписание;
    var aFlt: string[];
    var locFlt: string;
    with Query.Create([Бюджет_Персонал.Справочники.ШтатноеРасписание]) do
      aFlt[1] = 'ШР=' + Str(интНастройка.Record.ШтатноеРасписание);
      aFlt[2] = 'Подразделение=' + Str(Record.СЗПД[Index].Назначение.Подразделение);
      aFlt[3] = 'Должность=' + Str(Record.СЗПД[Index].Назначение.Должность);
      locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      Return СИС2.ФункцииДокумента.QueryRecord(Бюджет_Персонал.Справочники.ШтатноеРасписание, locFlt);
    end;
  end;

  proc Вычислить_УсловиеЗанятости(Index: integer);
    var локКодФормыЗачисления: string;
    if (Record.СЗПД[Index].Назначение.ПериодРаботы.ФормаЗачисления <> nil):
      локКодФормыЗачисления = Record.СЗПД[Index].Назначение.ПериодРаботы.ФормаЗачисления.Код;
    fi;
    if (локКодФормыЗачисления = Бюджет_Персонал.Константы.КодФормыЗачисления_Штат):
      Record.СЗПД[Index].УсловиеЗанятости = 1;
    elsif (локКодФормыЗачисления = Бюджет_Персонал.Константы.КодФормыЗачисления_СовместительствоВнешнее):
      Record.СЗПД[Index].УсловиеЗанятости = 2;
    elsif (локКодФормыЗачисления = Бюджет_Персонал.Константы.КодФормыЗачисления_СовместительствоВнутреннее):
      Record.СЗПД[Index].УсловиеЗанятости = 3;
    else
      Record.СЗПД[Index].УсловиеЗанятости = 0;
    fi;
  end;

  proc Вычислить_Ставку(Index: integer);
    var локСтавка: numeric;
    локСтавка = Record.СЗПД[Index].Назначение.КолСтавок;
    if (локСтавка = 0):
      локСтавка = 1;
    fi;
    Record.СЗПД[Index].Ставка = Round(локСтавка, 3);
  end;

  proc Вычислить_Часы(Index: integer);
    var локТабель: Бюджет_Персонал.Табель.Назначения;
    var локЧасы: numeric;
    локТабель = Бюджет_Персонал.Табель.Назначения.CreateExt(Record.СЗПД[Index].Назначение, Record.ОтчетныйПериод);
    локЧасы = локТабель.НормаЧасов;
    Record.СЗПД[Index].РабВремяНорма = Round(локЧасы, 2);
    with Бюджет_Персонал.Константы do
      локЧасы = локТабель.ЧасовПоТипу([ТипВремени_ФактРабота,ТипВремени_НеРабота]);
      Record.СЗПД[Index].РабВремяФакт = Round(локЧасы, 2);
    end;
  end;

  proc Вычислить_НачисленияТариф(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.НачисленияТариф) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].НачисленияТариф = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  proc Вычислить_ОУТ(Index: integer);
    var локОут: string;
    локОут = Бюджет_ЗПиДД.Библио.ОценкаСОУТДолжностиНаДату(Record.СЗПД[Index].Назначение, Record.ОтчетныйПериод.ДатаНачала);
    локОут = SubStr(локОут, 2);
    Record.СЗПД[Index].ОУТ = локОут;
  end;

  proc Вычислить_ДоплатаСовмещение(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаСовмещение) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].ДоплатаСовмещение = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  proc Вычислить_НачисленияИныеФед(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.НачисленияИныеФед) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].НачисленияИныеФед = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  proc Вычислить_НачисленияИныеРег(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.НачисленияИныеРег) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].НачисленияИныеРег = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  proc Вычислить_НачисленияПремии(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.НачисленияПремии) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].НачисленияПремии = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  proc Вычислить_СтажДляНадбавки(Index: integer); -- "непрерывный"
    var aFlt: string[];
    var локСтажНаДату: Бюджет_Персонал.Стаж.НаДату;
    var локИзмерительСтажа: integer[];
    var локДатаЗапросаСтажа: date;
    if (интНастройка.ТипСтажа_Непрерывный <> nil):
      with Query.Create([Бюджет_Персонал.АтрибутыСотрудника.Стаж]) do
        aFlt[1] = 'ФизЛицо=' + Str(Record.Работник);
        aFlt[2] = 'ТипСтажа=' + Str(интНастройка.ТипСтажа_Непрерывный);
        Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
        Order = 'ДатаНачала-';
        Select;
        if RecordsExists:
          локИзмерительСтажа = [Current.Лет, Current.Месяцев, Current.Дней] as integer[];
          локСтажНаДату = Бюджет_Персонал.Стаж.НаДату.CreateEx(интНастройка.ТипСтажа_Непрерывный, Current.ДатаНачала, локИзмерительСтажа);
          локДатаЗапросаСтажа = Record.ОтчетныйПериод.ДатаНачала;
          локСтажНаДату = Бюджет_Персонал.Стаж.Методы.ПересчитатьСтажНаДату(локСтажНаДату, локДатаЗапросаСтажа, Current.Коэффициент);
          Record.СЗПД[Index].НепрерывныйСтаж = Str(локСтажНаДату.ИзмерительСтажа[1], '00') + '.' + Str(локСтажНаДату.ИзмерительСтажа[2], '00');
        else
          Record.СЗПД[Index].НепрерывныйСтаж = 'н/д';
        fi;
      end;
    fi;
  end;

  proc Вычислить_ДоплатаСтаж(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаСтаж) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].ДоплатаСтаж = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  proc Вычислить_ДоплатаСМ(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаСМ) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].ДоплатаСМ = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  proc Вычислить_КвалКатегорию(Index: integer);
    var aFlt: string[];
    var локВидыРолей1, локВидыРолей2, локВидыРолей3: Базовый.Справочники.РольСубъекта[];
    Record.СЗПД[Index].КвалКатегория = nil;
    with Query.Create([Бюджет_Персонал.АтрибутыФизлица.Роль]) do
      aFlt[1] = 'Роль.ЭтоДолжность = ' + Str(ТББ_Базовый.КонстантыРолей.рольКвалификация);
      aFlt[2] = 'ФизЛицо=' + Str(Record.Работник);
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      Order = 'ДатаНачала-';
      Select;
      if RecordsExists:
        локВидыРолей1 = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.КвалКатегории.Первая) as Базовый.Справочники.РольСубъекта[];
        локВидыРолей2 = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.КвалКатегории.Вторая) as Базовый.Справочники.РольСубъекта[];
        локВидыРолей3 = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.КвалКатегории.Высшая) as Базовый.Справочники.РольСубъекта[];
        if (Current as Бюджет_Персонал.АтрибутыФизлица.Роль).Роль in локВидыРолей1:
          Record.СЗПД[Index].КвалКатегория = 1;
        elsif (Current as Бюджет_Персонал.АтрибутыФизлица.Роль).Роль in локВидыРолей2:
          Record.СЗПД[Index].КвалКатегория = 2;
        elsif (Current as Бюджет_Персонал.АтрибутыФизлица.Роль).Роль in локВидыРолей3:
          Record.СЗПД[Index].КвалКатегория = 3;
        fi;
      fi;
    end;
  end;

  proc Вычислить_ДоплатаКвалКат(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаКвалКат) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].ДоплатаКвалКат = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  proc Вычислить_УченуюСтепень(Index: integer);
    var aFlt: string[];
    var локВидыРолей1, локВидыРолей2: Базовый.Справочники.РольСубъекта[];
    Record.СЗПД[Index].УченаяСтепень = nil;
    with Query.Create([Бюджет_Персонал.АтрибутыФизлица.Роль]) do
      aFlt = nil;
      aFlt[1] = 'Роль.ЭтоДолжность = ' + Str(ТББ_Базовый.КонстантыРолей.рольУчСтепень);
      aFlt[2] = 'ФизЛицо=' + Str(Record.Работник);
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      Order = 'ДатаНачала-';
      Select;
      if RecordsExists:
        локВидыРолей1 = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.УчСтепени.КН) as Базовый.Справочники.РольСубъекта[];
        локВидыРолей2 = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.УчСтепени.ДН) as Базовый.Справочники.РольСубъекта[];
        if (Current as Бюджет_Персонал.АтрибутыФизлица.Роль).Роль in локВидыРолей1:
          Record.СЗПД[Index].УченаяСтепень = 1;
        elsif (Current as Бюджет_Персонал.АтрибутыФизлица.Роль).Роль in локВидыРолей2:
          Record.СЗПД[Index].УченаяСтепень = 2;
        fi;
      fi;
    end;
  end;

  proc Вычислить_ДоплатаУС(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаУС) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].ДоплатаУС = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  proc Вычислить_ДоплатаНаставничество(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаНаставничество) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].ДоплатаНаставничество = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  proc Вычислить_ДоплатаМолодСпец(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ДоплатаМолодСпец) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].ДоплатаМолодСпец = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  proc Вычислить_ВыплатыИныеСтимул(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ВыплатыИныеСтимул) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].ВыплатыИныеСтимул = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  proc Вычислить_ВыплатыПрочие(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ВыплатыПрочие) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].ВыплатыПрочие = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  proc Вычислить_ВыплатыКомпенс(Index: integer);
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(интНастройка.Record.ВидыНачислений.ВыплатыКомпенс) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Record.СЗПД[Index].ВыплатыКомпенс = ПолучитьСуммуНачислений(Index, локВидыНачислений);
  end;

  func ПолучитьСуммуНачислений(Index: integer; локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[]): numeric;
    var aFlt: string[];
    with Query.Create([Бюджет_ЗПиДД.РасчетныеОперации.Начисление]) do
      aFlt[1] = 'Назначение=' + Str(Record.СЗПД[Index].Назначение);
      aFlt[2] = 'Расчет.УчетныйПериод.Код="' + Str(Record.ОтчетныйПериод.Код) + '"';
      aFlt[3] = 'СуммаКУчету<>0';
      aFlt[4] = 'Расчет.ТипРасчета<>' + Str(Бюджет_ЗПиДД.Константы.ТипРасчетаАванс);
      aFlt[5] = 'Расчет.Подшивка.Завершен';
      aFlt[6] = 'ВидНачисления in ' + Str(локВидыНачислений);
      Filter = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
      Return CalcAggregates('Sum(СуммаКУчету)') as numeric;
    end;
  end;

inobject public

  proc ПересчетИтогов(Index: integer);
    Вычислить_НачисленияИтого(Index);
    Вычислить_НачисленияОУТ(Index);
    Вычислить_НачисленияВсего;
  end;

  proc Вычислить_НачисленияИтого(Index: integer);
    with Record.СЗПД[Index] do
      НачисленияИтого = НачисленияТариф +       --(16)
                        ДоплатаСовмещение +     --(19)
                        НачисленияИныеФед +     --(20)
                        НачисленияИныеРег +     --(21)
                        НачисленияПремии +      --(22)
                        ДоплатаСтаж +           --(24)
                        ДоплатаСМ +             --(25)
                        ДоплатаКвалКат +        --(27)
                        ДоплатаУС +             --(29)
                        ДоплатаНаставничество + --(30)
                        ДоплатаМолодСпец +      --(31)
                        ВыплатыИныеСтимул +     --(32)
                        ВыплатыПрочие +         --(33)
                        ВыплатыКомпенс;         --(34)
    end;
  end;

  proc Вычислить_НачисленияОУТ(Index: integer);
    if (Record.СЗПД[Index].ОУТ <> nil):
      Record.СЗПД[Index].НачисленияОУТ = Record.СЗПД[Index].НачисленияИтого;
    else
      Record.СЗПД[Index].НачисленияОУТ = 0;
    fi;
  end;

  proc Вычислить_НачисленияВсего;
    var i: integer;
    with Record do
      НачисленияТариф       = nil;
      НачисленияОУТ         = nil;
      ДоплатаСовмещение     = nil;
      НачисленияИныеФед     = nil;
      НачисленияИныеРег     = nil;
      НачисленияПремии      = nil;
      ДоплатаСтаж           = nil;
      ДоплатаСМ             = nil;
      ДоплатаКвалКат        = nil;
      ДоплатаУС             = nil;
      ДоплатаНаставничество = nil;
      ДоплатаМолодСпец      = nil;
      ВыплатыИныеСтимул     = nil;
      ВыплатыПрочие         = nil;
      ВыплатыКомпенс        = nil;
      НачисленияИтого       = nil;
    end;
    for i = 1 .. Record.СЗПД.Count do
      with Record do
        НачисленияТариф       = НачисленияТариф       +  Record.СЗПД[i].НачисленияТариф        ;
        НачисленияОУТ         = НачисленияОУТ         +  Record.СЗПД[i].НачисленияОУТ          ;
        ДоплатаСовмещение     = ДоплатаСовмещение     +  Record.СЗПД[i].ДоплатаСовмещение      ;
        НачисленияИныеФед     = НачисленияИныеФед     +  Record.СЗПД[i].НачисленияИныеФед      ;
        НачисленияИныеРег     = НачисленияИныеРег     +  Record.СЗПД[i].НачисленияИныеРег      ;
        НачисленияПремии      = НачисленияПремии      +  Record.СЗПД[i].НачисленияПремии       ;
        ДоплатаСтаж           = ДоплатаСтаж           +  Record.СЗПД[i].ДоплатаСтаж            ;
        ДоплатаСМ             = ДоплатаСМ             +  Record.СЗПД[i].ДоплатаСМ              ;
        ДоплатаКвалКат        = ДоплатаКвалКат        +  Record.СЗПД[i].ДоплатаКвалКат         ;
        ДоплатаУС             = ДоплатаУС             +  Record.СЗПД[i].ДоплатаУС              ;
        ДоплатаНаставничество = ДоплатаНаставничество +  Record.СЗПД[i].ДоплатаНаставничество  ;
        ДоплатаМолодСпец      = ДоплатаМолодСпец      +  Record.СЗПД[i].ДоплатаМолодСпец       ;
        ВыплатыИныеСтимул     = ВыплатыИныеСтимул     +  Record.СЗПД[i].ВыплатыИныеСтимул      ;
        ВыплатыПрочие         = ВыплатыПрочие         +  Record.СЗПД[i].ВыплатыПрочие          ;
        ВыплатыКомпенс        = ВыплатыКомпенс        +  Record.СЗПД[i].ВыплатыКомпенс         ;
        НачисленияИтого       = НачисленияИтого       +  Record.СЗПД[i].НачисленияИтого        ;
      end;
    od;
  end;


inobject private

  --@doc Эта процедура наследует МР; На нее завязано изменение поля Record во всех методах интерфейса;
  proc SetRecord (locRecord: Отчетность.СИоЗП_СЗП);
    Inherited SetRecord(locRecord);
    ПолучитьНастройку;
  end;

  proc ПолучитьНастройку; -- при невозможности определить наше учреждение поле интНастройка деинициализируется
    if (Record.фСИоЗП <> nil):
      интНастройка = Настройки.интСИоЗП.OpenForSubject(Record.фСИоЗП.НашеУчреждение);
    else
      интНастройка = nil;
    fi;
  end;

end