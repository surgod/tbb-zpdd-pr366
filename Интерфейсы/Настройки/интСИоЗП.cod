class inherited ТББ_Базовый.Базовые.интЗаписьСрв "";
import СИС2 classes Константы, Функции, СтроковыеФункции, ФункцииДокумента;

inclass public

  func СвязанныйКлассЗаписей: class СИС2.Базовая.БазоваяЗапись;
    Result = Настройки.СИоЗП;
  end;

  func Create: Настройки.интСИоЗП;
    Result = inherited Create;
    Result.SetRecord(Настройки.СИоЗП.Create);
  end;

  func ОткрытьПоЗаписи synonym OpenRecord (locRecord: Настройки.СИоЗП): Настройки.интСИоЗП;
    Result = inherited Create;
    Result = FindInterfaceByRecord(locRecord);
    if (Result = nil):
      Result = inherited Create;
      Result.SetRecord(locRecord);
    fi;
  end;

  func ОткрытьДляУчреждения synonym OpenForSubject (locSubject: Базовый.Данные.Субъект): Настройки.интСИоЗП;
    -- Метод вернет непустое значение (объект) даже в том случае, если запись с настройками для учреждения еще не создана.
    var locRecord: Бюджет_ЗПиДД_ПР366.Настройки.СИоЗП;
    locRecord = QueryRecord(Бюджет_ЗПиДД_ПР366.Настройки.СИоЗП, 'НашеУчреждение=' + Str(locSubject));
    if (locRecord = nil):
      locRecord = Бюджет_ЗПиДД_ПР366.Настройки.СИоЗП.Create;
      locRecord.НашеУчреждение = locSubject;
      locRecord.Post;
      Result = OpenRecord(locRecord);
      Result.ВосстановитьНастройкуПоУмолчанию(true);
      Result.PostRecord;
      Result.SetRecord(locRecord);
    else
      Return OpenRecord(locRecord);
    fi;
  end;

  -- Поиск существующего экземпляра класса интерфейса по записи
  func FindInterfaceByRecord (locRecord: Record; locCreate: Boolean = false): ТББ_Базовый.Базовые.интЗаписьСрв;
    var i, ii: Integer;
    ii = Self.ObjectsCount;
    for i = 1 .. ii do
      if (Objects[i].Record = locRecord):
        Return Objects[i];
      fi;
    od;
    Return If(locCreate, OpenRecord(locRecord), nil);
  end;

inobject public

  proc SetRecord (locRecord: Настройки.СИоЗП);
    inherited SetRecord(locRecord);
    if (Self.Record.ШтатноеРасписание = nil):
      УстШтатноеРасписаниеПоУмолчанию;
    fi;
    if (Self.Record.УчСтепени.КН.Count = 0) and (Self.Record.УчСтепени.ДН.Count = 0):
      УстУчСтепениПоУмолчанию;
    fi;
    if (Self.Record.КвалКатегории.Первая.Count = 0) and (Self.Record.КвалКатегории.Вторая.Count = 0) and (Self.Record.КвалКатегории.Высшая.Count = 0):
      УстКвалКатегорииПоУмолчанию;
    fi;
    if (Self.Record.ВидыНачислений.НачисленияТариф.Count = 0):
      УстВидыНачисленийПоУмолчанию;
    fi;
    if (Self.Record.БюджетыЗП.Федеральный.Count = 0) and
       (Self.Record.БюджетыЗП.СубъектаРФ.Count = 0) and
       (Self.Record.БюджетыЗП.Муниципальный.Count = 0) and
       (Self.Record.БюджетыЗП.ОМС.Count = 0) and
       (Self.Record.БюджетыЗП.ИнойБюджет.Count = 0):
      УстБюджетыПоУмолчанию;
    fi;
    if (Self.Record.ДолжностиРуководства.Рук.Count = 0) and
       (Self.Record.ДолжностиРуководства.Зам.Count = 0) and
       (Self.Record.ДолжностиРуководства.ГлБух.Count = 0):
      УстДолжностиПоУмолчанию;
    fi;
    СоздатьЧекЛистКвалКатегорий;
    СоздатьЧекЛистУчСтепеней;
    СоздатьЧекЛистНачислений;
    СоздатьЧекЛистБюджетов;
    СоздатьЧекЛистДолжностей;
  end;

  proc ВосстановитьНастройкуПоУмолчанию (Впервые: logical = false);
    if (Self.Record <> nil):
      if (Self.Record.НашеУчреждение <> nil):
        if Впервые:
          УстКвалКатегорииПоУмолчанию;
          УстУчСтепениПоУмолчанию;
          УстБюджетыПоУмолчанию;
          УстДолжностиПоУмолчанию;
        fi;
        УстВидыНачисленийПоУмолчанию;
        PostRecord;
      fi;
    fi;
  end;

  -- Стажи ------------------------------------------------------------------------------------------------------------

  func ТипСтажа_Общий: Бюджет_Персонал.Справочники.ТипСтажа;
    Return Record.ТипСтажа_Общий;
  end;

  func ТипСтажа_Непрерывный: Бюджет_Персонал.Справочники.ТипСтажа;
    Return Record.ТипСтажа_Непрерывный;
  end;

  func ТипСтажа_Общий_Имя: string;
    if (Record.ТипСтажа_Общий <> nil):
      Return Record.ТипСтажа_Общий.Имя;
    fi;
  end;

  func ТипСтажа_Непрерывный_Имя: string;
    if (Record.ТипСтажа_Непрерывный <> nil):
      Return Record.ТипСтажа_Непрерывный.Имя;
    fi;
  end;

  ---------------------------------------------------------------------------------------------------------------------
  -- Штатное расписание -----------------------------------------------------------------------------------------------

  func ШтатноеРасписание: Бюджет_Персонал.Справочники.ШтатноеРасписание;
    if (Self.Record <> nil):
      Return Self.Record.ШтатноеРасписание;
    fi;
  end;

  func ШтатноеРасписание_Имя: string;
    var R: Бюджет_Персонал.Справочники.ШтатноеРасписание;
    var aTxt: string[];
    R = ШтатноеРасписание;
    if (R <> nil):
      aTxt[1] = R.НашеУчреждение.Имя;
      if (R.ДатаНачала <> nil):
        aTxt[2] = '(с ' + Str(R.ДатаНачала) + ')';
      fi;
      if (R.Комментарий <> nil):
        aTxt[3] = '[' + R.Комментарий + ']';
      fi;
      Return СИС2.СтроковыеФункции.МассивСтрокВТекст(aTxt, false);
    fi;
  end;

  proc УстШтатноеРасписаниеПоУмолчанию;
    var aFlt: string[];
    var locFlt: string;
    aFlt[1] = 'НашеУчреждение=' + Str(Self.Record.НашеУчреждение);
    aFlt[2] = 'isGroup=-1';
    aFlt[3] = 'GroupDoc=nil';
    aFlt[4] = 'ТипШр=0';
    aFlt[5] = 'ДолжностиГР';
    aFlt[6] = ТББ_Базовый.Фильтры.ФильтрПоДате(today);
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    Self.Record.ШтатноеРасписание = СИС2.ФункцииДокумента.QueryLastRecord(Бюджет_Персонал.Справочники.ШтатноеРасписание, locFlt);
  end;

  ---------------------------------------------------------------------------------------------------------------------
  -- Квал.категории ---------------------------------------------------------------------------------------------------

inobject public

  var КвалКатегорияВРасчете: ТББ_Базовый.ЧекЛист.Элемент[];

  func ПолучитьКоличествоКвалКатегорий: integer;
    Return LengthOfArray(КвалКатегорияВРасчете);
  end;

  proc УстКвалКатегорииПоУмолчанию;
    var aFlt: string[];
    var locFlt: string;
    var aData1, aData2, aDataH: Базовый.Справочники.РольСубъекта[];
    var aDocId1, aDocId2: integer[];
    var k: integer;
    -- Первая --
    Self.Record.КвалКатегории.Первая.Clear;
    aFlt[1] = 'isGroup=0';
    aFlt[2] = 'ЭтоДолжность=' + Str(ТББ_Базовый.КонстантыРолей.рольКвалификация);
    aFlt[3] = 'Match(Имя, "*1*")';
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aData1 = СИС2.ФункцииДокумента.QueryAsArray([Базовый.Справочники.РольСубъекта], locFlt, 'Код') as Базовый.Справочники.РольСубъекта[];
    СИС2.ФункцииДокумента.WriteStructField(aData1, Self.Record.КвалКатегории.Первая);
    for k = 1 .. LengthOfArray(aData1) do
      AddInArray(aDocId1, aData1[k].DocID);
    od;
    -- Вторая --
    Self.Record.КвалКатегории.Вторая.Clear;
    aFlt[3] = 'Match(Имя, "*2*")';
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aData2 = СИС2.ФункцииДокумента.QueryAsArray([Базовый.Справочники.РольСубъекта], locFlt, 'Код') as Базовый.Справочники.РольСубъекта[];
    СИС2.ФункцииДокумента.WriteStructField(aData2, Self.Record.КвалКатегории.Вторая);
    for k = 1 .. LengthOfArray(aData2) do
      AddInArray(aDocId2, aData2[k].DocID);
    od;
    -- Высшая --
    Self.Record.КвалКатегории.Высшая.Clear;
    aFlt[3] = 'not (DocId in ' + ToStr(aDocId1) + ')';
    aFlt[4] = 'not (DocId in ' + ToStr(aDocId2) + ')';
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aDataH = СИС2.ФункцииДокумента.QueryAsArray([Базовый.Справочники.РольСубъекта], locFlt, 'Код') as Базовый.Справочники.РольСубъекта[];
    СИС2.ФункцииДокумента.WriteStructField(aDataH, Self.Record.КвалКатегории.Высшая);
  end;

inobject private

  proc СоздатьЧекЛистКвалКатегорий; -- по записи
    var aFlt: string[];
    var locElt: ТББ_Базовый.ЧекЛист.Элемент;
    var КвалКатегории_1            :Базовый.Справочники.РольСубъекта[];
    var КвалКатегории_2            :Базовый.Справочники.РольСубъекта[];
    var КвалКатегории_В            :Базовый.Справочники.РольСубъекта[];
    КвалКатегорияВРасчете = nil; -- в случае реинициализации
    КвалКатегории_1 = СИС2.ФункцииДокумента.ReadStructField(Self.Record.КвалКатегории.Первая) as Базовый.Справочники.РольСубъекта[];
    КвалКатегории_2 = СИС2.ФункцииДокумента.ReadStructField(Self.Record.КвалКатегории.Вторая) as Базовый.Справочники.РольСубъекта[];
    КвалКатегории_В = СИС2.ФункцииДокумента.ReadStructField(Self.Record.КвалКатегории.Высшая) as Базовый.Справочники.РольСубъекта[];
    with Query.Create([Базовый.Справочники.РольСубъекта]) do
      aFlt[1] = 'isGroup=0';
      aFlt[2] = 'ЭтоДолжность=' + Str(ТББ_Базовый.КонстантыРолей.рольКвалификация);
      Filter = СложитьСтрокиФильтраПоИ(aFlt);
      Order = 'Код';
      Select;
      while not Eof do
        locElt = ТББ_Базовый.ЧекЛист.Элемент.CreateByRecord(0, Current);
        locElt.SetLinkData('Первая' ,(Current in КвалКатегории_1));
        locElt.SetLinkData('Вторая' ,(Current in КвалКатегории_2));
        locElt.SetLinkData('Высшая' ,(Current in КвалКатегории_В));
        AddInArray(КвалКатегорияВРасчете, locElt);
        Next;
      od;
    end;
  end;

  func ПолучитьКвалКатегори_Группы (GroupName: string): Базовый.Справочники.РольСубъекта[]; -- кэшированные данные
    var p, pp: integer;
    var locElt: ТББ_Базовый.ЧекЛист.Элемент;
    pp = ПолучитьКоличествоКвалКатегорий;
    for p = 1 .. pp do
      locElt = КвалКатегорияВРасчете[p];
      if (locElt.GetLinkData(GroupName) as logical):
        AddInArray(Result, locElt.Record);
      fi;
    od;
  end;

  ---------------------------------------------------------------------------------------------------------------------
  -- Ученые степени ---------------------------------------------------------------------------------------------------

inobject public

  var УчСтепеньВРасчете: ТББ_Базовый.ЧекЛист.Элемент[];

  func ПолучитьКоличествоУчСтепеней: integer;
    Return LengthOfArray(УчСтепеньВРасчете);
  end;

  proc УстУчСтепениПоУмолчанию;
    var aFlt: string[];
    var locFlt: string;
    var aDataPhC, aDataPhD: Базовый.Справочники.РольСубъекта[];
    var aDocIdPhC: integer[];
    var k: integer;
    -- Кандидат --
    Self.Record.УчСтепени.КН.Clear;
    aFlt[1] = 'isGroup=0';
    aFlt[2] = 'ЭтоДолжность=' + Str(ТББ_Базовый.КонстантыРолей.рольУчСтепень);
    aFlt[3] = 'Match(Имя, "*канд*")';
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aDataPhC = СИС2.ФункцииДокумента.QueryAsArray([Базовый.Справочники.РольСубъекта], locFlt, 'Код') as Базовый.Справочники.РольСубъекта[];
    СИС2.ФункцииДокумента.WriteStructField(aDataPhC, Self.Record.УчСтепени.КН);
    for k = 1 .. LengthOfArray(aDataPhC) do
      AddInArray(aDocIdPhC, aDataPhC[k].DocID);
    od;
    -- Доктор --
    Self.Record.УчСтепени.ДН.Clear;
    aFlt[3] = 'not (DocId in ' + ToStr(aDataPhC) + ')';
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aDataPhD = СИС2.ФункцииДокумента.QueryAsArray([Базовый.Справочники.РольСубъекта], locFlt, 'Код') as Базовый.Справочники.РольСубъекта[];
    СИС2.ФункцииДокумента.WriteStructField(aDataPhD, Self.Record.УчСтепени.ДН);
  end;

inobject private

  proc СоздатьЧекЛистУчСтепеней; -- по записи
    var aFlt: string[];
    var locElt: ТББ_Базовый.ЧекЛист.Элемент;
    var УчСтепениКН :Базовый.Справочники.РольСубъекта[];
    var УчСтепениДН :Базовый.Справочники.РольСубъекта[];
    УчСтепеньВРасчете = nil; -- в случае реинициализации
    УчСтепениКН = СИС2.ФункцииДокумента.ReadStructField(Self.Record.УчСтепени.КН) as Базовый.Справочники.РольСубъекта[];
    УчСтепениДН = СИС2.ФункцииДокумента.ReadStructField(Self.Record.УчСтепени.ДН) as Базовый.Справочники.РольСубъекта[];
    with Query.Create([Базовый.Справочники.РольСубъекта]) do
      aFlt[1] = 'isGroup=0';
      aFlt[2] = 'ЭтоДолжность=' + Str(ТББ_Базовый.КонстантыРолей.рольУчСтепень);
      Filter = СложитьСтрокиФильтраПоИ(aFlt);
      Order = 'Код';
      Select;
      while not Eof do
        locElt = ТББ_Базовый.ЧекЛист.Элемент.CreateByRecord(0, Current);
        locElt.SetLinkData('КН' ,(Current in УчСтепениКН));
        locElt.SetLinkData('ДН' ,(Current in УчСтепениДН));
        AddInArray(УчСтепеньВРасчете, locElt);
        Next;
      od;
    end;
  end;

  func ПолучитьУчСтепени_Группы (GroupName: string): Базовый.Справочники.РольСубъекта[]; -- кэшированные данные
    var p, pp: integer;
    var locElt: ТББ_Базовый.ЧекЛист.Элемент;
    pp = ПолучитьКоличествоУчСтепеней;
    for p = 1 .. pp do
      locElt = УчСтепеньВРасчете[p];
      if (locElt.GetLinkData(GroupName) as logical):
        AddInArray(Result, locElt.Record);
      fi;
    od;
  end;

  ---------------------------------------------------------------------------------------------------------------------
  -- Виды начислений --------------------------------------------------------------------------------------------------

inobject public

  var НачислениеВРасчете: ТББ_Базовый.ЧекЛист.Элемент[];

  func ПолучитьКоличествоВидовНачислений: integer;
    Return LengthOfArray(НачислениеВРасчете);
  end;

  proc УстВидыНачисленийПоУмолчанию;
    УстВидыНачисленийПоУмолчанию_НачисленияТариф;
    УстВидыНачисленийПоУмолчанию_ДоплатаСовмещение;
    УстВидыНачисленийПоУмолчанию_НачисленияИныеФед;
    УстВидыНачисленийПоУмолчанию_НачисленияИныеРег;
    УстВидыНачисленийПоУмолчанию_НачисленияПремии;
    УстВидыНачисленийПоУмолчанию_ДоплатаСтаж;
    УстВидыНачисленийПоУмолчанию_ДоплатаСМ;
    УстВидыНачисленийПоУмолчанию_ДоплатаКвалКат;
    УстВидыНачисленийПоУмолчанию_ДоплатаУС;
    УстВидыНачисленийПоУмолчанию_ДоплатаНаставничество;
    УстВидыНачисленийПоУмолчанию_ДоплатаМолодСпец;
    УстВидыНачисленийПоУмолчанию_ВыплатыИныеСтимул;
    УстВидыНачисленийПоУмолчанию_ВыплатыПрочие;
    УстВидыНачисленийПоУмолчанию_ВыплатыКомпенс;
    УстВидыНачисленийПоУмолчанию_Исключаемые;
  end;

  proc УстВидыНачисленийПоУмолчанию_НачисленияТариф;
    var aFlt: string[];
    var locFlt: string;
    var aData: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Self.Record.ВидыНачислений.НачисленияТариф.Clear;
    aFlt[1] = ПолучитьОбщуюЧастьФильтра_ВидовНачислений;
    aFlt[2] = 'Match(ТипРасчета.Код, "11??")'; -- оклады
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.ВидыНачислений.НачисленияТариф);
  end;

  proc УстВидыНачисленийПоУмолчанию_ДоплатаСовмещение; -- по умолчанию не определены
    Self.Record.ВидыНачислений.ДоплатаСовмещение.Clear;
  end;

  proc УстВидыНачисленийПоУмолчанию_НачисленияИныеФед;
    var aFlt: string[];
    var locFlt: string;
    var aData: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Self.Record.ВидыНачислений.НачисленияИныеФед.Clear;
    aFlt[1] = ПолучитьОбщуюЧастьФильтра_ВидовНачислений;
    aFlt[2] = 'ТипРасчета.Код in ["1201","1202","1203","1204","1260","1265","1270"]'; -- абстрактные надбавки + ночные,сверхурочные, праздничные
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.ВидыНачислений.НачисленияИныеФед);
  end;

  proc УстВидыНачисленийПоУмолчанию_НачисленияИныеРег; -- по умолчанию не определены
    Self.Record.ВидыНачислений.НачисленияИныеРег.Clear;
  end;

  proc УстВидыНачисленийПоУмолчанию_НачисленияПремии;
    var aFlt: string[];
    var locFlt: string;
    var aData: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Self.Record.ВидыНачислений.НачисленияПремии.Clear;
    aFlt[1] = ПолучитьОбщуюЧастьФильтра_ВидовНачислений;
    aFlt[2] = 'Match(ТипРасчета.Код, "15??")'; -- премии
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.ВидыНачислений.НачисленияПремии);
  end;

  proc УстВидыНачисленийПоУмолчанию_ДоплатаСтаж;
    var aFlt: string[];
    var locFlt: string;
    var aData: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Self.Record.ВидыНачислений.ДоплатаСтаж.Clear;
    aFlt[1] = ПолучитьОбщуюЧастьФильтра_ВидовНачислений;
    aFlt[2] = 'ТипРасчета.Код in ["1250"]'; -- стаж, выслуга
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.ВидыНачислений.ДоплатаСтаж);
  end;

  proc УстВидыНачисленийПоУмолчанию_ДоплатаСМ; -- (доплаты за работу в сельской местности) -  по умолчанию не определены
    Self.Record.ВидыНачислений.ДоплатаСМ.Clear;
  end;

  proc УстВидыНачисленийПоУмолчанию_ДоплатаКвалКат;
    var aFlt: string[];
    var locFlt: string;
    var aData: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Self.Record.ВидыНачислений.ДоплатаКвалКат.Clear;
    aFlt[1] = ПолучитьОбщуюЧастьФильтра_ВидовНачислений;
    aFlt[2] = 'ТипРасчета.Код in ["1225"]'; --
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.ВидыНачислений.ДоплатаКвалКат);
  end;

  proc УстВидыНачисленийПоУмолчанию_ДоплатаУС;
    var aFlt: string[];
    var locFlt: string;
    var aData: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Self.Record.ВидыНачислений.ДоплатаУС.Clear;
    aFlt[1] = ПолучитьОбщуюЧастьФильтра_ВидовНачислений;
    aFlt[2] = 'ТипРасчета.Код in ["1210","1215"]'; -- для тех, кто путает уч.степень и уч.звание
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.ВидыНачислений.ДоплатаУС);
  end;

  proc УстВидыНачисленийПоУмолчанию_ДоплатаНаставничество; -- по умолчанию не определены
    Self.Record.ВидыНачислений.ДоплатаНаставничество.Clear;
  end;

  proc УстВидыНачисленийПоУмолчанию_ДоплатаМолодСпец; -- по умолчанию не определены
    Self.Record.ВидыНачислений.ДоплатаМолодСпец.Clear;
  end;

  proc УстВидыНачисленийПоУмолчанию_ВыплатыИныеСтимул;
    var aFlt: string[];
    var locFlt: string;
    var aData: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Self.Record.ВидыНачислений.ВыплатыИныеСтимул.Clear;
    aFlt[1] = ПолучитьОбщуюЧастьФильтра_ВидовНачислений;
    aFlt[2] = 'ТипРасчета.Код in ["1220","1290"]'; -- за классный чин и прочие доплаты
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.ВидыНачислений.ВыплатыИныеСтимул);
  end;

  proc УстВидыНачисленийПоУмолчанию_ВыплатыПрочие;
    var aFlt: string[];
    var locFlt: string;
    var aData: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Self.Record.ВидыНачислений.ВыплатыПрочие.Clear;
    aFlt[1] = ПолучитьОбщуюЧастьФильтра_ВидовНачислений;
    aFlt[2] = 'ТипРасчета.Код in ["1902","1903"]';
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.ВидыНачислений.ВыплатыПрочие);
  end;

  proc УстВидыНачисленийПоУмолчанию_ВыплатыКомпенс;
    var aFlt: string[];
    var locFlt: string;
    var aData: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    Self.Record.ВидыНачислений.ВыплатыКомпенс.Clear;
    aFlt[1] = ПолучитьОбщуюЧастьФильтра_ВидовНачислений;
    aFlt[2] = 'ТипРасчета.Код in ["1280"]'; -- районные
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.ВидыНачислений.ВыплатыКомпенс);
  end;

  proc УстВидыНачисленийПоУмолчанию_Исключаемые;
    var aData, aIncluded, aAllData: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var i: integer;
    Self.Record.ВидыНачислений.Исключаемые.Clear;
    aData = ReadStructField(Self.Record.ВидыНачислений.НачисленияТариф);        AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.ВидыНачислений.ДоплатаСовмещение);      AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.ВидыНачислений.НачисленияИныеФед);      AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.ВидыНачислений.НачисленияИныеРег);      AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.ВидыНачислений.НачисленияПремии);       AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.ВидыНачислений.ДоплатаСтаж);            AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.ВидыНачислений.ДоплатаСМ);              AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.ВидыНачислений.ДоплатаКвалКат);         AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.ВидыНачислений.ДоплатаУС);              AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.ВидыНачислений.ДоплатаНаставничество);  AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.ВидыНачислений.ДоплатаМолодСпец);       AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.ВидыНачислений.ВыплатыИныеСтимул);      AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.ВидыНачислений.ВыплатыПрочие);          AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.ВидыНачислений.ВыплатыКомпенс);         AddsInArray(aIncluded, aData);
    aData = nil;
    aAllData = QueryAsArray(ПолучитьОбщуюЧастьФильтра_ВидовНачислений);
    for i = 1 .. LengthOfArray(aAllData) do
      if not (aAllData[i] in aIncluded):
        AddInArray(aData, aAllData[i]);
      fi;
    od;
    WriteStructField(aData, Self.Record.ВидыНачислений.Исключаемые);
  end;

  func ПолучитьОбщуюЧастьФильтра_ВидовНачислений: string;
    var aFlt: string[];
    aFlt[1] = 'НашеУчреждение=' + Str(Self.Record.НашеУчреждение);
    aFlt[2] = 'isGroup<>-1';
    aFlt[3] = 'ТипРасчета.Код<>"1901"'; -- кроме аванса
    Return ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
  end;

  -- Работа со списком видов начислений (кэшированные данные) --

  func ПолучитьНачисления_Исключаемые: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var p, pp: integer;
    var locElt: ТББ_Базовый.ЧекЛист.Элемент;
    pp = ПолучитьКоличествоВидовНачислений;
    for p = 1 .. pp do
      locElt = НачислениеВРасчете[p];
      if (not locElt.Record.IsGroup):
        if (not locElt.OnOff):
          AddInArray(Result, locElt.Record);
        fi;
      fi;
    od;
  end;

  func ПолучитьНачисления_Группы (GroupName: string): Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var p, pp: integer;
    var locElt: ТББ_Базовый.ЧекЛист.Элемент;
    pp = ПолучитьКоличествоВидовНачислений;
    for p = 1 .. pp do
      locElt = НачислениеВРасчете[p];
      if (not locElt.Record.IsGroup):
        if locElt.OnOff and (locElt.GetLinkData(GroupName) as logical):
          AddInArray(Result, locElt.Record);
        fi;
      fi;
    od;
  end;

  -- Сохраненные в записи данные

  func ПолучитьВидыНачисленийВРасчете: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var локВидыНачислений: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.НачисленияТариф) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.ДоплатаСовмещение) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.НачисленияИныеФед) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.НачисленияИныеРег) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.НачисленияПремии) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.ДоплатаСтаж) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.ДоплатаСМ) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.ДоплатаКвалКат) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.ДоплатаУС) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.ДоплатаНаставничество) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.ДоплатаМолодСпец) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.ВыплатыИныеСтимул) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.ВыплатыПрочие) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
    локВидыНачислений = СИС2.ФункцииДокумента.ReadStructField(Record.ВидыНачислений.ВыплатыКомпенс) as Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    СИС2.Функции.AddsInArray(Result, локВидыНачислений, true);
  end;

inobject private

  proc СоздатьЧекЛистНачислений; -- по записи
    var aFlt: string[];
    var locElt: ТББ_Базовый.ЧекЛист.Элемент;
    var ВидыНачислений_Исключаемые            :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_НачисленияТариф        :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_ДоплатаСовмещение      :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_НачисленияИныеФед      :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_НачисленияИныеРег      :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_НачисленияПремии       :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_ДоплатаСтаж            :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_ДоплатаСМ              :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_ДоплатаКвалКат         :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_ДоплатаУС              :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_ДоплатаНаставничество  :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_ДоплатаМолодСпец       :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_ВыплатыИныеСтимул      :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_ВыплатыПрочие          :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var ВидыНачислений_ВыплатыКомпенс         :Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    НачислениеВРасчете = nil; -- в случае реинициализации
    ВидыНачислений_Исключаемые            = ReadStructField(Self.Record.ВидыНачислений.Исключаемые);
    ВидыНачислений_НачисленияТариф        = ReadStructField(Self.Record.ВидыНачислений.НачисленияТариф);
    ВидыНачислений_ДоплатаСовмещение      = ReadStructField(Self.Record.ВидыНачислений.ДоплатаСовмещение);
    ВидыНачислений_НачисленияИныеФед      = ReadStructField(Self.Record.ВидыНачислений.НачисленияИныеФед);
    ВидыНачислений_НачисленияИныеРег      = ReadStructField(Self.Record.ВидыНачислений.НачисленияИныеРег);
    ВидыНачислений_НачисленияПремии       = ReadStructField(Self.Record.ВидыНачислений.НачисленияПремии);
    ВидыНачислений_ДоплатаСтаж            = ReadStructField(Self.Record.ВидыНачислений.ДоплатаСтаж);
    ВидыНачислений_ДоплатаСМ              = ReadStructField(Self.Record.ВидыНачислений.ДоплатаСМ);
    ВидыНачислений_ДоплатаКвалКат         = ReadStructField(Self.Record.ВидыНачислений.ДоплатаКвалКат);
    ВидыНачислений_ДоплатаУС              = ReadStructField(Self.Record.ВидыНачислений.ДоплатаУС);
    ВидыНачислений_ДоплатаНаставничество  = ReadStructField(Self.Record.ВидыНачислений.ДоплатаНаставничество);
    ВидыНачислений_ДоплатаМолодСпец       = ReadStructField(Self.Record.ВидыНачислений.ДоплатаМолодСпец);
    ВидыНачислений_ВыплатыИныеСтимул      = ReadStructField(Self.Record.ВидыНачислений.ВыплатыИныеСтимул);
    ВидыНачислений_ВыплатыПрочие          = ReadStructField(Self.Record.ВидыНачислений.ВыплатыПрочие);
    ВидыНачислений_ВыплатыКомпенс         = ReadStructField(Self.Record.ВидыНачислений.ВыплатыКомпенс);
    with Query.Create([Бюджет_ЗПиДД.Справочники.ВидыНачислений]) do
      aFlt[1] = 'НашеУчреждение=' + Str(Record.НашеУчреждение);
      aFlt[2] = 'SubStr(ТипРасчета.Код,1,1)="1"'; -- только "зарплата"
      aFlt[3] = 'GroupDoc<>nil'; -- кроме верхней записи
      aFlt[4] = 'ТипРасчета.Код<>"1901"'; -- кроме аванса
      Filter = СложитьСтрокиФильтраПоИ(aFlt);
      Order = 'Код';
      Select;
      while not Eof do
        locElt = ТББ_Базовый.ЧекЛист.Элемент.CreateByRecord(0, Current);
        locElt.SetOnOff(not (Current in ВидыНачислений_Исключаемые));
        locElt.SetLinkData('НачисленияТариф'       ,(Current in ВидыНачислений_НачисленияТариф));
        locElt.SetLinkData('ДоплатаСовмещение'     ,(Current in ВидыНачислений_ДоплатаСовмещение));
        locElt.SetLinkData('НачисленияИныеФед'     ,(Current in ВидыНачислений_НачисленияИныеФед));
        locElt.SetLinkData('НачисленияИныеРег'     ,(Current in ВидыНачислений_НачисленияИныеРег));
        locElt.SetLinkData('НачисленияПремии'      ,(Current in ВидыНачислений_НачисленияПремии));
        locElt.SetLinkData('ДоплатаСтаж'           ,(Current in ВидыНачислений_ДоплатаСтаж));
        locElt.SetLinkData('ДоплатаСМ'             ,(Current in ВидыНачислений_ДоплатаСМ));
        locElt.SetLinkData('ДоплатаКвалКат'        ,(Current in ВидыНачислений_ДоплатаКвалКат));
        locElt.SetLinkData('ДоплатаУС'             ,(Current in ВидыНачислений_ДоплатаУС));
        locElt.SetLinkData('ДоплатаНаставничество' ,(Current in ВидыНачислений_ДоплатаНаставничество));
        locElt.SetLinkData('ДоплатаМолодСпец'      ,(Current in ВидыНачислений_ДоплатаМолодСпец));
        locElt.SetLinkData('ВыплатыИныеСтимул'     ,(Current in ВидыНачислений_ВыплатыИныеСтимул));
        locElt.SetLinkData('ВыплатыПрочие'         ,(Current in ВидыНачислений_ВыплатыПрочие));
        locElt.SetLinkData('ВыплатыКомпенс'        ,(Current in ВидыНачислений_ВыплатыКомпенс));
        AddInArray(НачислениеВРасчете, locElt);
        Next;
      od;
    end;
  end;

  ---------------------------------------------------------------------------------------------------------------------
  -- Бюджеты ----------------------------------------------------------------------------------------------------------

inobject public

  var БюджетВРасчете: ТББ_Базовый.ЧекЛист.Элемент[];

  func ПолучитьКоличествоБюджетов: integer;
    Return LengthOfArray(БюджетВРасчете);
  end;

  proc УстБюджетыПоУмолчанию;
    var aFlt: string[];
    var locFlt: string;
    var aData: Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    -- Все бюджеты по умолчанию "федеральные" --
    Self.Record.БюджетыЗП.Федеральный.Clear;
    Self.Record.БюджетыЗП.СубъектаРФ.Clear;
    Self.Record.БюджетыЗП.Муниципальный.Clear;
    Self.Record.БюджетыЗП.ОМС.Clear;
    Self.Record.БюджетыЗП.ИнойБюджет.Clear;
    aFlt[1] = 'НашеУчреждение=' + Str(Self.Record.НашеУчреждение);
    aFlt[2] = 'ГруппаНачислений<>"' + Бюджет_ЗпИДД.Константы.ГруппаОперацийДовольствие + '"';
    locFlt = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ(aFlt);
    aData = СИС2.ФункцииДокумента.QueryAsArray([Бюджет_ЗПиДД.Справочники.ВидыБюджета], locFlt, 'Код') as Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.БюджетыЗП.Федеральный);
  end;

inobject private

  proc СоздатьЧекЛистБюджетов; -- по записи
    var aFlt: string[];
    var locElt: ТББ_Базовый.ЧекЛист.Элемент;
    var Федеральный   :Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    var СубъектаРФ    :Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    var Муниципальный :Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    var ОМС           :Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    var ИнойБюджет    :Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    БюджетВРасчете = nil; -- в случае реинициализации
    Федеральный   = СИС2.ФункцииДокумента.ReadStructField(Self.Record.БюджетыЗП.Федеральный) as Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    СубъектаРФ    = СИС2.ФункцииДокумента.ReadStructField(Self.Record.БюджетыЗП.СубъектаРФ) as Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    Муниципальный = СИС2.ФункцииДокумента.ReadStructField(Self.Record.БюджетыЗП.Муниципальный) as Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    ОМС           = СИС2.ФункцииДокумента.ReadStructField(Self.Record.БюджетыЗП.ОМС) as Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    ИнойБюджет    = СИС2.ФункцииДокумента.ReadStructField(Self.Record.БюджетыЗП.ИнойБюджет) as Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    with Query.Create([Бюджет_ЗПиДД.Справочники.ВидыБюджета]) do
      aFlt[1] = 'НашеУчреждение=' + Str(Self.Record.НашеУчреждение);
      aFlt[2] = 'ГруппаНачислений<>"' + Бюджет_ЗпИДД.Константы.ГруппаОперацийДовольствие + '"';
      Filter = СложитьСтрокиФильтраПоИ(aFlt);
      Order = 'Код';
      Select;
      while not Eof do
        locElt = ТББ_Базовый.ЧекЛист.Элемент.CreateByRecord(0, Current);
        locElt.SetLinkData('Федеральный'   ,(Current in Федеральный));
        locElt.SetLinkData('СубъектаРФ'    ,(Current in СубъектаРФ));
        locElt.SetLinkData('Муниципальный' ,(Current in Муниципальный));
        locElt.SetLinkData('ОМС'           ,(Current in ОМС));
        locElt.SetLinkData('ИнойБюджет'    ,(Current in ИнойБюджет));
        AddInArray(БюджетВРасчете, locElt);
        Next;
      od;
    end;
  end;

  func ПолучитьБюджеты_Группы (GroupName: string): Бюджет_ЗПиДД.Справочники.ВидыБюджета[]; -- кэшированные данные
    var p, pp: integer;
    var locElt: ТББ_Базовый.ЧекЛист.Элемент;
    pp = ПолучитьКоличествоБюджетов;
    for p = 1 .. pp do
      locElt = БюджетВРасчете[p];
      if (locElt.GetLinkData(GroupName) as logical):
        AddInArray(Result, locElt.Record);
      fi;
    od;
  end;

  ---------------------------------------------------------------------------------------------------------------------
  -- Должности --------------------------------------------------------------------------------------------------------

inobject public

  var ДолжностьВРасчете: ТББ_Базовый.ЧекЛист.Элемент[];

  func ПолучитьКоличествоДолжностей: integer;
    Return LengthOfArray(ДолжностьВРасчете);
  end;

  proc УстДолжностиПоУмолчанию; -- просто очистка
    Self.Record.ДолжностиРуководства.Рук.Clear;
    Self.Record.ДолжностиРуководства.Зам.Clear;
    Self.Record.ДолжностиРуководства.ГлБух.Clear;
  end;

inobject private

  proc СоздатьЧекЛистДолжностей; -- по записи
    var aFlt: string[];
    var locElt: ТББ_Базовый.ЧекЛист.Элемент;
    var Рук   :Базовый.Справочники.РольСубъекта[];
    var Зам   :Базовый.Справочники.РольСубъекта[];
    var ГлБух :Базовый.Справочники.РольСубъекта[];
    ДолжностьВРасчете = nil; -- в случае реинициализации
    Рук   = СИС2.ФункцииДокумента.ReadStructField(Self.Record.ДолжностиРуководства.Рук) as Базовый.Справочники.РольСубъекта[];
    Зам   = СИС2.ФункцииДокумента.ReadStructField(Self.Record.ДолжностиРуководства.Зам) as Базовый.Справочники.РольСубъекта[];
    ГлБух = СИС2.ФункцииДокумента.ReadStructField(Self.Record.ДолжностиРуководства.ГлБух) as Базовый.Справочники.РольСубъекта[];
    with Query.Create([Базовый.Справочники.РольСубъекта]) do
      aFlt[1] = 'isGroup=0';
      aFlt[2] = 'ЭтоДолжность=' + Str(ТББ_Базовый.КонстантыРолей.рольДолжность);
      aFlt[3] = 'ДолжностьГР';
      Filter = СложитьСтрокиФильтраПоИ(aFlt);
      Order = 'Имя';
      Select;
      while not Eof do
        locElt = ТББ_Базовый.ЧекЛист.Элемент.CreateByRecord(0, Current);
        locElt.SetLinkData('Рук'   ,(Current in Рук));
        locElt.SetLinkData('Зам'   ,(Current in Зам));
        locElt.SetLinkData('ГлБух' ,(Current in ГлБух));
        AddInArray(ДолжностьВРасчете, locElt);
        Next;
      od;
    end;
  end;

  func ПолучитьДолжности_Группы (GroupName: string): Базовый.Справочники.РольСубъекта[]; -- кэшированные данные
    var p, pp: integer;
    var locElt: ТББ_Базовый.ЧекЛист.Элемент;
    pp = ПолучитьКоличествоДолжностей;
    for p = 1 .. pp do
      locElt = ДолжностьВРасчете[p];
      if (locElt.GetLinkData(GroupName) as logical):
        AddInArray(Result, locElt.Record);
      fi;
    od;
  end;

  ---------------------------------------------------------------------------------------------------------------------

inobject public

  proc PostRecord;
    PostRecord_K;
    PostRecord_St;
    PostRecord_N;
    PostRecord_B;
    PostRecord_Sf;
    inherited PostRecord;
  end;

inobject private

  proc PostRecord_K;
    var aData: Базовый.Справочники.РольСубъекта[];
    aData = ПолучитьКвалКатегори_Группы('Первая'); СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.КвалКатегории.Первая);
    aData = ПолучитьКвалКатегори_Группы('Вторая'); СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.КвалКатегории.Вторая);
    aData = ПолучитьКвалКатегори_Группы('Высшая'); СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.КвалКатегории.Высшая);
  end;

  proc PostRecord_St;
    var aData: Базовый.Справочники.РольСубъекта[];
    aData = ПолучитьУчСтепени_Группы('КН'); СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.УчСтепени.КН);
    aData = ПолучитьУчСтепени_Группы('ДН'); СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.УчСтепени.ДН);
  end;

  proc PostRecord_N;
    var aData: Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    aData = ПолучитьНачисления_Исключаемые;                      WriteStructField(aData, Self.Record.ВидыНачислений.Исключаемые);
    aData = ПолучитьНачисления_Группы('НачисленияТариф'       ); WriteStructField(aData, Self.Record.ВидыНачислений.НачисленияТариф);
    aData = ПолучитьНачисления_Группы('ДоплатаСовмещение'     ); WriteStructField(aData, Self.Record.ВидыНачислений.ДоплатаСовмещение);
    aData = ПолучитьНачисления_Группы('НачисленияИныеФед'     ); WriteStructField(aData, Self.Record.ВидыНачислений.НачисленияИныеФед);
    aData = ПолучитьНачисления_Группы('НачисленияИныеРег'     ); WriteStructField(aData, Self.Record.ВидыНачислений.НачисленияИныеРег);
    aData = ПолучитьНачисления_Группы('НачисленияПремии'      ); WriteStructField(aData, Self.Record.ВидыНачислений.НачисленияПремии);
    aData = ПолучитьНачисления_Группы('ДоплатаСтаж'           ); WriteStructField(aData, Self.Record.ВидыНачислений.ДоплатаСтаж);
    aData = ПолучитьНачисления_Группы('ДоплатаСМ'             ); WriteStructField(aData, Self.Record.ВидыНачислений.ДоплатаСМ);
    aData = ПолучитьНачисления_Группы('ДоплатаКвалКат'        ); WriteStructField(aData, Self.Record.ВидыНачислений.ДоплатаКвалКат);
    aData = ПолучитьНачисления_Группы('ДоплатаУС'             ); WriteStructField(aData, Self.Record.ВидыНачислений.ДоплатаУС);
    aData = ПолучитьНачисления_Группы('ДоплатаНаставничество' ); WriteStructField(aData, Self.Record.ВидыНачислений.ДоплатаНаставничество);
    aData = ПолучитьНачисления_Группы('ДоплатаМолодСпец'      ); WriteStructField(aData, Self.Record.ВидыНачислений.ДоплатаМолодСпец);
    aData = ПолучитьНачисления_Группы('ВыплатыИныеСтимул'     ); WriteStructField(aData, Self.Record.ВидыНачислений.ВыплатыИныеСтимул);
    aData = ПолучитьНачисления_Группы('ВыплатыПрочие'         ); WriteStructField(aData, Self.Record.ВидыНачислений.ВыплатыПрочие);
    aData = ПолучитьНачисления_Группы('ВыплатыКомпенс'        ); WriteStructField(aData, Self.Record.ВидыНачислений.ВыплатыКомпенс);
  end;

  proc PostRecord_B;
    var aData: Бюджет_ЗПиДД.Справочники.ВидыБюджета[];
    aData = ПолучитьБюджеты_Группы('Федеральный');   СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.БюджетыЗП.Федеральный);
    aData = ПолучитьБюджеты_Группы('СубъектаРФ');    СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.БюджетыЗП.СубъектаРФ);
    aData = ПолучитьБюджеты_Группы('Муниципальный'); СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.БюджетыЗП.Муниципальный);
    aData = ПолучитьБюджеты_Группы('ОМС');           СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.БюджетыЗП.ОМС);
    aData = ПолучитьБюджеты_Группы('ИнойБюджет');    СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.БюджетыЗП.ИнойБюджет);
  end;

  proc PostRecord_Sf;
    var aData: Базовый.Справочники.РольСубъекта[];
    aData = ПолучитьДолжности_Группы('Рук');   СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.ДолжностиРуководства.Рук);
    aData = ПолучитьДолжности_Группы('Зам');   СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.ДолжностиРуководства.Зам);
    aData = ПолучитьДолжности_Группы('ГлБух'); СИС2.ФункцииДокумента.WriteStructField(aData, Self.Record.ДолжностиРуководства.ГлБух);
  end;

inobject public

  Record: Настройки.СИоЗП;

inobject private

  -- 2_Копия методов СИС2.ФункцииДокумена (расш.); здесь - серверные, типизированные0. --

  func  QueryAsArray (Flt: String = ""): Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var z: integer;
    with Query.Create([Бюджет_ЗПиДД.Справочники.ВидыНачислений]) do
      Filter = Flt;
      LoadingFieldsMode = mdNone;
      if not RecordsExists:
       return [];
      else
        Select;
        while not EOF do
          z = z + 1;
          Result[z] = Current;
          Next;
        end;
      fi;
    end;
  end;

  --@doc Осуществляет считывание из многозначного поля записи в массив
  func СчитатьИзМногозначногоПоля synonym ReadStructField (МногозначноеПоле: Subtable): Бюджет_ЗПиДД.Справочники.ВидыНачислений[];
    var i: Integer;
    if МногозначноеПоле<>nil:
      for i = 1 .. МногозначноеПоле.Count do
        try
          result[i] = МногозначноеПоле.Items[i];
        except
        end;
      od;
    fi;
  end;

  --@doc Осуществляет запись в многозначное поле из массива
  proc ЗаписатьВМногозначноеПоле synonym WriteStructField (Значение: Бюджет_ЗПиДД.Справочники.ВидыНачислений[]; МногозначноеПоле: Subtable);
    var i: Integer;
    if Значение <> СчитатьИзМногозначногоПоля(МногозначноеПоле):
      МногозначноеПоле.Clear;
      for i = 1 .. LengthOfArray(Значение) do
        МногозначноеПоле.Add;
        МногозначноеПоле.Items[i] = Значение[i];
      od;
    fi;
  end;


end