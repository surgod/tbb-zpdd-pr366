class inherited “ЅЅ_Ѕазовый.Ѕазовые.инт«апись—рв "";
--class inherited ћашина–еквизитов.Ѕазовые.инт«апись "";
import —»—2 classes  онстанты, ‘ункции, —троковые‘ункции, ‘ункцииƒокумента;

inclass public

  func —в€занный ласс«аписей: class —»—2.Ѕазова€.Ѕазова€«апись;
    Result = Ќастройки.—»о«ѕ;
  end;

  func Create: Ќастройки.инт—»о«ѕ;
    Result = inherited Create;
    Result.SetRecord(Ќастройки.—»о«ѕ.Create);
  end;

  func ќткрытьѕо«аписи synonym OpenRecord (locRecord: Ќастройки.—»о«ѕ): Ќастройки.инт—»о«ѕ;
    Result = inherited Create;
    Result.SetRecord(locRecord);
--    Result = FindInterfaceByRecord(locRecord);
--    if (Result = nil):
--      Result = inherited Create;
--      Result.SetRecord(locRecord);
--    fi;
  end;

  func ќткрытьƒл€”чреждени€ synonym OpenForSubject (locSubject: Ѕазовый.ƒанные.—убъект): Ќастройки.инт—»о«ѕ;
    -- ћетод вернет непустое значение (объект) даже в том случае, если запись с настройками дл€ учреждени€ еще не создана.
    var locRecord: Ѕюджет_«ѕиƒƒ_ѕ–366.Ќастройки.—»о«ѕ;
    locRecord = QueryRecord(Ѕюджет_«ѕиƒƒ_ѕ–366.Ќастройки.—»о«ѕ, 'Ќаше”чреждение=' + Str(locSubject));
    if (locRecord = nil):
      locRecord = Ѕюджет_«ѕиƒƒ_ѕ–366.Ќастройки.—»о«ѕ.Create;
      locRecord.Ќаше”чреждение = locSubject;
      locRecord.Post;
      Result = OpenRecord(locRecord);
      Result.¬осстановитьЌастройкуѕо”молчанию(true);
      Result.PostRecord;
      Result.SetRecord(locRecord);
    else
      Return OpenRecord(locRecord);
    fi;
  end;

inobject public

  proc SetRecord (locRecord: Ќастройки.—»о«ѕ);
    inherited SetRecord(locRecord);
    if (Self.Record.¬идыЌачислений.Ќачислени€“ариф.Count = 0): --and
    --(Self.Record.¬идыЌачислений.ƒоп¬ыплата.Count = 0) and
    --(Self.Record.¬идыЌачислений.ƒѕ.Count = 0) and
    --(Self.Record.¬идыЌачислений.ƒругое.Count = 0) and
    --(Self.Record.¬идыЌачислений.ѕрочее.Count = 0):
      ”ст¬идыЌачисленийѕо”молчанию;
    fi;
    —оздать„екЋистЌачислений;
  end;

  func ѕолучить оличество¬идовЌачислений: integer;
    Return LengthOfArray(Ќачисление¬–асчете);
  end;

  proc ¬осстановитьЌастройкуѕо”молчанию (¬первые: logical = false);
    if (Self.Record <> nil):
      if (Self.Record.Ќаше”чреждение <> nil):
        -- Ў–, категории --
        if ¬первые:
          --”стЎтатное–асписаниеѕо”молчанию;
          --”ст атегорииѕо”молчанию;
        fi;
        -- ¬иды начислений --
        ”ст¬идыЌачисленийѕо”молчанию;
        --
        PostRecord;
      fi;
    fi;
  end;

  proc ”стЎтатное–асписаниеѕо”молчанию;
    var aFlt: string[];
    var locFlt: string;
    aFlt[1] = 'Ќаше”чреждение=' + Str(Self.Record.Ќаше”чреждение);
    aFlt[2] = 'isGroup=-1';
    aFlt[3] = 'GroupDoc=nil';
    aFlt[4] = '“ипЎр=0';
    aFlt[5] = “ЅЅ_Ѕазовый.‘ильтры.‘ильтрѕоƒате(today);
    locFlt = “ЅЅ_Ѕазовый.‘ильтры.—ложить—троки‘ильтраѕо»(aFlt);
    Self.Record.Ў– = QueryLastRecord(Ѕюджет_ѕерсонал.—правочники.Ўтатное–асписание, locFlt);
  end;


  proc ”ст¬идыЌачисленийѕо”молчанию;
    ”ст¬идыЌачисленийѕо”молчанию_Ќачислени€“ариф;
    ”ст¬идыЌачисленийѕо”молчанию_ƒоплата—овмещение;
    ”ст¬идыЌачисленийѕо”молчанию_Ќачислени€»ные‘ед;
    ”ст¬идыЌачисленийѕо”молчанию_Ќачислени€»ные–ег;
    ”ст¬идыЌачисленийѕо”молчанию_Ќачислени€ѕремии;
    ”ст¬идыЌачисленийѕо”молчанию_ƒоплата—таж;
    ”ст¬идыЌачисленийѕо”молчанию_ƒоплата—ћ;
    ”ст¬идыЌачисленийѕо”молчанию_ƒоплата вал ат;
    ”ст¬идыЌачисленийѕо”молчанию_ƒоплата”—;
    ”ст¬идыЌачисленийѕо”молчанию_ƒоплатаЌаставничество;
    ”ст¬идыЌачисленийѕо”молчанию_ƒоплатаћолод—пец;
    ”ст¬идыЌачисленийѕо”молчанию_¬ыплаты»ные—тимул;
    ”ст¬идыЌачисленийѕо”молчанию_¬ыплатыѕрочие;
    ”ст¬идыЌачисленийѕо”молчанию_¬ыплаты омпенс;
    ”ст¬идыЌачисленийѕо”молчанию_»сключаемые;
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_Ќачислени€“ариф;
    var aFlt: string[];
    var locFlt: string;
    var aData: Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    Self.Record.¬идыЌачислений.Ќачислени€“ариф.Clear;
    aFlt[1] = ѕолучитьќбщую„асть‘ильтра_¬идовЌачислений;
    aFlt[2] = 'Match(“ип–асчета. од, "11??")'; -- оклады
    locFlt = “ЅЅ_Ѕазовый.‘ильтры.—ложить—троки‘ильтраѕо»(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.¬идыЌачислений.Ќачислени€“ариф);
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_ƒоплата—овмещение; -- по умолчанию не определены
    Self.Record.¬идыЌачислений.ƒоплата—овмещение.Clear;
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_Ќачислени€»ные‘ед;
    var aFlt: string[];
    var locFlt: string;
    var aData: Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    Self.Record.¬идыЌачислений.Ќачислени€»ные‘ед.Clear;
    aFlt[1] = ѕолучитьќбщую„асть‘ильтра_¬идовЌачислений;
    aFlt[2] = '“ип–асчета. од in ["1201","1202","1203","1204","1260","1265","1270"]'; -- абстрактные надбавки + ночные,сверхурочные, праздничные
    locFlt = “ЅЅ_Ѕазовый.‘ильтры.—ложить—троки‘ильтраѕо»(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.¬идыЌачислений.Ќачислени€»ные‘ед);
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_Ќачислени€»ные–ег; -- по умолчанию не определены
    Self.Record.¬идыЌачислений.Ќачислени€»ные–ег.Clear;
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_Ќачислени€ѕремии;
    var aFlt: string[];
    var locFlt: string;
    var aData: Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    Self.Record.¬идыЌачислений.Ќачислени€ѕремии.Clear;
    aFlt[1] = ѕолучитьќбщую„асть‘ильтра_¬идовЌачислений;
    aFlt[2] = 'Match(“ип–асчета. од, "15??")'; -- премии
    locFlt = “ЅЅ_Ѕазовый.‘ильтры.—ложить—троки‘ильтраѕо»(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.¬идыЌачислений.Ќачислени€ѕремии);
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_ƒоплата—таж;
    var aFlt: string[];
    var locFlt: string;
    var aData: Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    Self.Record.¬идыЌачислений.ƒоплата—таж.Clear;
    aFlt[1] = ѕолучитьќбщую„асть‘ильтра_¬идовЌачислений;
    aFlt[2] = '“ип–асчета. од in ["1250"]'; -- стаж, выслуга
    locFlt = “ЅЅ_Ѕазовый.‘ильтры.—ложить—троки‘ильтраѕо»(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.¬идыЌачислений.ƒоплата—таж);
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_ƒоплата—ћ; -- (доплаты за работу в сельской местности) -  по умолчанию не определены
    Self.Record.¬идыЌачислений.ƒоплата—ћ.Clear;
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_ƒоплата вал ат;
    var aFlt: string[];
    var locFlt: string;
    var aData: Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    Self.Record.¬идыЌачислений.ƒоплата вал ат.Clear;
    aFlt[1] = ѕолучитьќбщую„асть‘ильтра_¬идовЌачислений;
    aFlt[2] = '“ип–асчета. од in ["1225"]'; --
    locFlt = “ЅЅ_Ѕазовый.‘ильтры.—ложить—троки‘ильтраѕо»(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.¬идыЌачислений.ƒоплата вал ат);
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_ƒоплата”—;
    var aFlt: string[];
    var locFlt: string;
    var aData: Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    Self.Record.¬идыЌачислений.ƒоплата”—.Clear;
    aFlt[1] = ѕолучитьќбщую„асть‘ильтра_¬идовЌачислений;
    aFlt[2] = '“ип–асчета. од in ["1210","1215"]'; -- дл€ тех, кто путает уч.степень и уч.звание
    locFlt = “ЅЅ_Ѕазовый.‘ильтры.—ложить—троки‘ильтраѕо»(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.¬идыЌачислений.ƒоплата”—);
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_ƒоплатаЌаставничество; -- по умолчанию не определены
    Self.Record.¬идыЌачислений.ƒоплатаЌаставничество.Clear;
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_ƒоплатаћолод—пец; -- по умолчанию не определены
    Self.Record.¬идыЌачислений.ƒоплатаћолод—пец.Clear;
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_¬ыплаты»ные—тимул;
    var aFlt: string[];
    var locFlt: string;
    var aData: Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    Self.Record.¬идыЌачислений.¬ыплаты»ные—тимул.Clear;
    aFlt[1] = ѕолучитьќбщую„асть‘ильтра_¬идовЌачислений;
    aFlt[2] = '“ип–асчета. од in ["1220","1290"]'; -- за классный чин и прочие доплаты
    locFlt = “ЅЅ_Ѕазовый.‘ильтры.—ложить—троки‘ильтраѕо»(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.¬идыЌачислений.¬ыплаты»ные—тимул);
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_¬ыплатыѕрочие;
    var aFlt: string[];
    var locFlt: string;
    var aData: Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    Self.Record.¬идыЌачислений.¬ыплатыѕрочие.Clear;
    aFlt[1] = ѕолучитьќбщую„асть‘ильтра_¬идовЌачислений;
    aFlt[2] = '“ип–асчета. од in ["1902","1903"]';
    locFlt = “ЅЅ_Ѕазовый.‘ильтры.—ложить—троки‘ильтраѕо»(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.¬идыЌачислений.¬ыплатыѕрочие);
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_¬ыплаты омпенс;
    var aFlt: string[];
    var locFlt: string;
    var aData: Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    Self.Record.¬идыЌачислений.¬ыплаты омпенс.Clear;
    aFlt[1] = ѕолучитьќбщую„асть‘ильтра_¬идовЌачислений;
    aFlt[2] = '“ип–асчета. од in ["1280"]'; -- районные
    locFlt = “ЅЅ_Ѕазовый.‘ильтры.—ложить—троки‘ильтраѕо»(aFlt);
    aData = QueryAsArray(locFlt);
    WriteStructField(aData, Self.Record.¬идыЌачислений.¬ыплаты омпенс);
  end;

  proc ”ст¬идыЌачисленийѕо”молчанию_»сключаемые;
    var aData, aIncluded, aAllData: Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var i: integer;
    Self.Record.¬идыЌачислений.»сключаемые.Clear;
    aData = ReadStructField(Self.Record.¬идыЌачислений.Ќачислени€“ариф);        AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.¬идыЌачислений.ƒоплата—овмещение);      AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.¬идыЌачислений.Ќачислени€»ные‘ед);      AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.¬идыЌачислений.Ќачислени€»ные–ег);      AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.¬идыЌачислений.Ќачислени€ѕремии);       AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.¬идыЌачислений.ƒоплата—таж);            AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.¬идыЌачислений.ƒоплата—ћ);              AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.¬идыЌачислений.ƒоплата вал ат);         AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.¬идыЌачислений.ƒоплата”—);              AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.¬идыЌачислений.ƒоплатаЌаставничество);  AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.¬идыЌачислений.ƒоплатаћолод—пец);       AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.¬идыЌачислений.¬ыплаты»ные—тимул);      AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.¬идыЌачислений.¬ыплатыѕрочие);          AddsInArray(aIncluded, aData);
    aData = ReadStructField(Self.Record.¬идыЌачислений.¬ыплаты омпенс);         AddsInArray(aIncluded, aData);
    aData = nil;
    aAllData = QueryAsArray(ѕолучитьќбщую„асть‘ильтра_¬идовЌачислений);
    for i = 1 .. LengthOfArray(aAllData) do
      if not (aAllData[i] in aIncluded):
        AddInArray(aData, aAllData[i]);
      fi;
    od;
    WriteStructField(aData, Self.Record.¬идыЌачислений.»сключаемые);
  end;


  func ѕолучитьќбщую„асть‘ильтра_¬идовЌачислений: string;
    var aFlt: string[];
    aFlt[1] = 'Ќаше”чреждение=' + Str(Self.Record.Ќаше”чреждение);
    aFlt[2] = 'isGroup<>-1';
    aFlt[3] = '“ип–асчета. од<>"1901"'; -- кроме аванса
    Return “ЅЅ_Ѕазовый.‘ильтры.—ложить—троки‘ильтраѕо»(aFlt);
  end;


  proc ”стЎтатное–асписание (locValue: Ѕюджет_ѕерсонал.—правочники.Ўтатное–асписание);
    RecordModify(Self.Record);
    Self.Record.Ў– = locValue;
  end;

  func Ўтатное–асписание: Ѕюджет_ѕерсонал.—правочники.Ўтатное–асписание;
    if (Self.Record <> nil):
      Return Self.Record.Ў–;
    fi;
  end;

  func Ўтатное–асписание_»м€: string;
    var R: Ѕюджет_ѕерсонал.—правочники.Ўтатное–асписание;
    var aTxt: string[];
    R = Ўтатное–асписание;
    if (R <> nil):
      aTxt[1] = R.Ќаше”чреждение.»м€;
      if (R.ƒатаЌачала <> nil):
        aTxt[2] = '(с ' + Str(R.ƒатаЌачала) + ')';
      fi;
      if (R. омментарий <> nil):
        aTxt[3] = '[' + R. омментарий + ']';
      fi;
      Return ћассив—трок¬“екст(aTxt, false);
    fi;
  end;


  func ѕолучитьЌачислени€_»сключаемые: Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var p, pp: integer;
    var locElt: “ЅЅ_Ѕазовый.„екЋист.Ёлемент;
    pp = ѕолучить оличество¬идовЌачислений;
    for p = 1 .. pp do
      locElt = Ќачисление¬–асчете[p];
      if (not locElt.Record.IsGroup):
        if (not locElt.OnOff):
          AddInArray(Result, locElt.Record);
        fi;
      fi;
    od;
  end;

  func ѕолучитьЌачислени€_√руппы (GroupName: string): Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var p, pp: integer;
    var locElt: “ЅЅ_Ѕазовый.„екЋист.Ёлемент;
    pp = ѕолучить оличество¬идовЌачислений;
    for p = 1 .. pp do
      locElt = Ќачисление¬–асчете[p];
      if (not locElt.Record.IsGroup):
        if locElt.OnOff and (locElt.GetLinkData(GroupName) as logical):
          AddInArray(Result, locElt.Record);
        fi;
      fi;
    od;
  end;

  proc PostRecord;
    var aData: Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    aData = ѕолучитьЌачислени€_»сключаемые;                      WriteStructField(aData, Self.Record.¬идыЌачислений.»сключаемые);
    aData = ѕолучитьЌачислени€_√руппы('Ќачислени€“ариф'       ); WriteStructField(aData, Self.Record.¬идыЌачислений.Ќачислени€“ариф);
    aData = ѕолучитьЌачислени€_√руппы('ƒоплата—овмещение'     ); WriteStructField(aData, Self.Record.¬идыЌачислений.ƒоплата—овмещение);
    aData = ѕолучитьЌачислени€_√руппы('Ќачислени€»ные‘ед'     ); WriteStructField(aData, Self.Record.¬идыЌачислений.Ќачислени€»ные‘ед);
    aData = ѕолучитьЌачислени€_√руппы('Ќачислени€»ные–ег'     ); WriteStructField(aData, Self.Record.¬идыЌачислений.Ќачислени€»ные–ег);
    aData = ѕолучитьЌачислени€_√руппы('Ќачислени€ѕремии'      ); WriteStructField(aData, Self.Record.¬идыЌачислений.Ќачислени€ѕремии);
    aData = ѕолучитьЌачислени€_√руппы('ƒоплата—таж'           ); WriteStructField(aData, Self.Record.¬идыЌачислений.ƒоплата—таж);
    aData = ѕолучитьЌачислени€_√руппы('ƒоплата—ћ'             ); WriteStructField(aData, Self.Record.¬идыЌачислений.ƒоплата—ћ);
    aData = ѕолучитьЌачислени€_√руппы('ƒоплата вал ат'        ); WriteStructField(aData, Self.Record.¬идыЌачислений.ƒоплата вал ат);
    aData = ѕолучитьЌачислени€_√руппы('ƒоплата”—'             ); WriteStructField(aData, Self.Record.¬идыЌачислений.ƒоплата”—);
    aData = ѕолучитьЌачислени€_√руппы('ƒоплатаЌаставничество' ); WriteStructField(aData, Self.Record.¬идыЌачислений.ƒоплатаЌаставничество);
    aData = ѕолучитьЌачислени€_√руппы('ƒоплатаћолод—пец'      ); WriteStructField(aData, Self.Record.¬идыЌачислений.ƒоплатаћолод—пец);
    aData = ѕолучитьЌачислени€_√руппы('¬ыплаты»ные—тимул'     ); WriteStructField(aData, Self.Record.¬идыЌачислений.¬ыплаты»ные—тимул);
    aData = ѕолучитьЌачислени€_√руппы('¬ыплатыѕрочие'         ); WriteStructField(aData, Self.Record.¬идыЌачислений.¬ыплатыѕрочие);
    aData = ѕолучитьЌачислени€_√руппы('¬ыплаты омпенс'        ); WriteStructField(aData, Self.Record.¬идыЌачислений.¬ыплаты омпенс);
    inherited PostRecord;
  end;

  Record: Ќастройки.—»о«ѕ;
  Ќачисление¬–асчете: “ЅЅ_Ѕазовый.„екЋист.Ёлемент[];

inobject private

  proc —оздать„екЋистЌачислений; -- по записи
    var aFlt: string[];
    var locElt: “ЅЅ_Ѕазовый.„екЋист.Ёлемент;
    var ¬идыЌачислений_»сключаемые            :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_Ќачислени€“ариф        :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_ƒоплата—овмещение      :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_Ќачислени€»ные‘ед      :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_Ќачислени€»ные–ег      :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_Ќачислени€ѕремии       :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_ƒоплата—таж            :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_ƒоплата—ћ              :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_ƒоплата вал ат         :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_ƒоплата”—              :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_ƒоплатаЌаставничество  :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_ƒоплатаћолод—пец       :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_¬ыплаты»ные—тимул      :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_¬ыплатыѕрочие          :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var ¬идыЌачислений_¬ыплаты омпенс         :Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    Ќачисление¬–асчете = nil; -- в случае реинициализации
    ¬идыЌачислений_»сключаемые            = ReadStructField(Self.Record.¬идыЌачислений.»сключаемые);
    ¬идыЌачислений_Ќачислени€“ариф        = ReadStructField(Self.Record.¬идыЌачислений.Ќачислени€“ариф);
    ¬идыЌачислений_ƒоплата—овмещение      = ReadStructField(Self.Record.¬идыЌачислений.ƒоплата—овмещение);
    ¬идыЌачислений_Ќачислени€»ные‘ед      = ReadStructField(Self.Record.¬идыЌачислений.Ќачислени€»ные‘ед);
    ¬идыЌачислений_Ќачислени€»ные–ег      = ReadStructField(Self.Record.¬идыЌачислений.Ќачислени€»ные–ег);
    ¬идыЌачислений_Ќачислени€ѕремии       = ReadStructField(Self.Record.¬идыЌачислений.Ќачислени€ѕремии);
    ¬идыЌачислений_ƒоплата—таж            = ReadStructField(Self.Record.¬идыЌачислений.ƒоплата—таж);
    ¬идыЌачислений_ƒоплата—ћ              = ReadStructField(Self.Record.¬идыЌачислений.ƒоплата—ћ);
    ¬идыЌачислений_ƒоплата вал ат         = ReadStructField(Self.Record.¬идыЌачислений.ƒоплата вал ат);
    ¬идыЌачислений_ƒоплата”—              = ReadStructField(Self.Record.¬идыЌачислений.ƒоплата”—);
    ¬идыЌачислений_ƒоплатаЌаставничество  = ReadStructField(Self.Record.¬идыЌачислений.ƒоплатаЌаставничество);
    ¬идыЌачислений_ƒоплатаћолод—пец       = ReadStructField(Self.Record.¬идыЌачислений.ƒоплатаћолод—пец);
    ¬идыЌачислений_¬ыплаты»ные—тимул      = ReadStructField(Self.Record.¬идыЌачислений.¬ыплаты»ные—тимул);
    ¬идыЌачислений_¬ыплатыѕрочие          = ReadStructField(Self.Record.¬идыЌачислений.¬ыплатыѕрочие);
    ¬идыЌачислений_¬ыплаты омпенс         = ReadStructField(Self.Record.¬идыЌачислений.¬ыплаты омпенс);
    with Query.Create([Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений]) do
      aFlt[1] = 'Ќаше”чреждение=' + Str(Record.Ќаше”чреждение);
      aFlt[2] = 'SubStr(“ип–асчета. од,1,1)="1"'; -- только "зарплата"
      aFlt[3] = 'GroupDoc<>nil'; -- кроме верхней записи
      aFlt[4] = '“ип–асчета. од<>"1901"'; -- кроме аванса
      Filter = —ложить—троки‘ильтраѕо»(aFlt);
      Order = ' од';
      Select;
      while not Eof do
        locElt = “ЅЅ_Ѕазовый.„екЋист.Ёлемент.CreateByRecord(0, Current);
        locElt.SetOnOff(not (Current in ¬идыЌачислений_»сключаемые));
        locElt.SetLinkData('Ќачислени€“ариф'       ,(Current in ¬идыЌачислений_Ќачислени€“ариф));
        locElt.SetLinkData('ƒоплата—овмещение'     ,(Current in ¬идыЌачислений_ƒоплата—овмещение));
        locElt.SetLinkData('Ќачислени€»ные‘ед'     ,(Current in ¬идыЌачислений_Ќачислени€»ные‘ед));
        locElt.SetLinkData('Ќачислени€»ные–ег'     ,(Current in ¬идыЌачислений_Ќачислени€»ные–ег));
        locElt.SetLinkData('Ќачислени€ѕремии'      ,(Current in ¬идыЌачислений_Ќачислени€ѕремии));
        locElt.SetLinkData('ƒоплата—таж'           ,(Current in ¬идыЌачислений_ƒоплата—таж));
        locElt.SetLinkData('ƒоплата—ћ'             ,(Current in ¬идыЌачислений_ƒоплата—ћ));
        locElt.SetLinkData('ƒоплата вал ат'        ,(Current in ¬идыЌачислений_ƒоплата вал ат));
        locElt.SetLinkData('ƒоплата”—'             ,(Current in ¬идыЌачислений_ƒоплата”—));
        locElt.SetLinkData('ƒоплатаЌаставничество' ,(Current in ¬идыЌачислений_ƒоплатаЌаставничество));
        locElt.SetLinkData('ƒоплатаћолод—пец'      ,(Current in ¬идыЌачислений_ƒоплатаћолод—пец));
        locElt.SetLinkData('¬ыплаты»ные—тимул'     ,(Current in ¬идыЌачислений_¬ыплаты»ные—тимул));
        locElt.SetLinkData('¬ыплатыѕрочие'         ,(Current in ¬идыЌачислений_¬ыплатыѕрочие));
        locElt.SetLinkData('¬ыплаты омпенс'        ,(Current in ¬идыЌачислений_¬ыплаты омпенс));
        AddInArray(Ќачисление¬–асчете, locElt);
        Next;
      od;
    end;
  end;


  -- 2_ опи€ методов —»—2.‘ункцииƒокумена (расш.); здесь - серверные, типизированные0. --

  func  QueryAsArray (Flt: String = ""): Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var z: integer;
    with Query.Create([Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений]) do
      Filter = Flt;
      LoadingFieldsMode = mdNone;
      if not RecordsExists:
       return [];
      else
        Select;
        while not EOF do
          z = z + 1;
          Result[z] = Current;
          Next;
        end;
      fi;
    end;
  end;

  --@doc ќсуществл€ет считывание из многозначного пол€ записи в массив
  func —читать»зћногозначногоѕол€ synonym ReadStructField (ћногозначноеѕоле: Subtable): Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[];
    var i: Integer;
    if ћногозначноеѕоле<>nil:
      for i = 1 .. ћногозначноеѕоле.Count do
        try
          result[i] = ћногозначноеѕоле.Items[i];
        except
        end;
      od;
    fi;
  end;

  --@doc ќсуществл€ет запись в многозначное поле из массива
  proc «аписать¬ћногозначноеѕоле synonym WriteStructField («начение: Ѕюджет_«ѕиƒƒ.—правочники.¬идыЌачислений[]; ћногозначноеѕоле: Subtable);
    var i: Integer;
    if «начение <> —читать»зћногозначногоѕол€(ћногозначноеѕоле):
      ћногозначноеѕоле.Clear;
      for i = 1 .. LengthOfArray(«начение) do
        ћногозначноеѕоле.Add;
        ћногозначноеѕоле.Items[i] = «начение[i];
      od;
    fi;
  end;


end