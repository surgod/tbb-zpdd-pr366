Class inherited МашинаРеквизитов.Базовые.блРедакторСИнтерфейсом "Форма СИоЗП" , editor Отчетность.СИоЗП;

import СИС2 classes Константы, Функции, СтроковыеФункции, ФункцииДокумента;
import ТББ_Отчетность classes CheckXml;

--{{ 2_Свойства

inclass public

  var ДатаНачалаАктуальности: date    := 01.01.2020;
  var ДатаОкончанияАктуальности: date := nil;
  stored var ПутьЭкспорта: string;
  var ФайлЭкспорта: string;

inobject private

  var фреймСодержание: TemplateFrame;
  var фреймРаздел1: TemplateFrame;
  var фреймРаздел2: TemplateFrame;
  var фреймРаздел3: TemplateFrame;
  var фреймНастройка_Настройка :TemplateFrame;
  var секцКвалКатегория: TemplateSection;
  var секцУчСтепень:     TemplateSection;
  var секцВидНачисления: TemplateSection;
  var секцВидБюджета:    TemplateSection;
  var секцДолжность:     TemplateSection;

  var картШаблона_Раздел1: TemplateCardfile;
  var картШаблона_Раздел2: TemplateCardfile;
  var картШаблона_Раздел3: TemplateCardfile;

  var кнДобавитьСтраницу: Button;
  var кнСоздатьФайл: Button;
  var кнПечать: Button;
  var кнСохранитьНастройку: Button;
  var кнОтменитьНастройку: Button;


  var Интерфейс: Отчетность.интСИоЗП;
  var интНастройка: Настройки.интСИоЗП;
  var ПравилаВыводаСтрокиНастройки: ТББ_Базовый.ЧекЛист.ПравилаОформления;
  var БиблиотекаСтилей: ТББ_Базовый.БиблиотекаСтилей;
--}}

-- 2_Конструкторы, визуализаторы0. --

-- 2_Обработчики событий шаблона0. --

inobject private

  proc шаблон_ПриСоздании (Context: Variant);
    фреймСодержание.Orientation = Template.Horizontal;
    inherited шаблон_ПриСоздании(Context);
    Template.FrameByName['фреймШапкаНавигатора'].Section[1].Row[1].Height = 5.8;
    with Template.FrameByName['фреймОписаниеРаздела'].Section[1] do
      AjustWidth = true;
      Row[1].Height = 5.8;
      CellByField['НадписьТекущегоФрейма'].Font.Size = 10;
    end;
    -- Обновление списков перечислимых полей --
    ОбновитьСписокПоля(Template.CellByField['ОКФС'], Константы.ДопустимыеОКФС);
  end;

  proc шаблон_ПриОткрытии (Create: Logical);
    БиблиотекаСтилей = ТББ_Базовый.БиблиотекаСтилей.CreateFromForm(Self);
    фреймЗакладки.ShowTabs = false;
    inherited шаблон_ПриОткрытии(Create);
  end;

  proc шаблон_ПриСчитывании;
    ИнициализироватьПравилаВывода;
    inherited шаблон_ПриСчитывании;
  end;


-- 2_Обработчики событий клеток шаблона0. --

inobject private

  func Поле_ПриНажатии (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
    if (Cell.Contents = 'Выбор отчетного года'):
      ПодготовитьПериодыЗаГод;
    elsif (Cell.Contents = 'q'):
      if (НашеУчреждение <> nil):
        ИНН         = НашеУчреждение.ИНН;
        КПП         = НашеУчреждение.КодПричины;
        ОКОГУ       = НашеУчреждение.ОКОГУ;
        РегНомерПфр = НашеУчреждение.НомерПФР;
        ТоПфр       = НашеУчреждение.КодТоПфр;
      fi;
    elsif (Cell.Contents = '+'):
      if (Cell.Owner.Name = 'секцПериод_СЗП_Заголовок'):
        ДобавитьОтчетныйМесяц;
      elsif (Cell.Owner.Name = 'секцПериод_ФондЗП_Заголовок'):
        ДобавитьОтчетныйГод(Период_ФондЗП);
      elsif (Cell.Owner.Name = 'секцПериод_СЗПРук_Заголовок'):
        ДобавитьОтчетныйГод(Период_СЗПРук);
      fi;
    elsif (Cell.Contents = 'x'):
      УдалитьОтчетныйПериод(Cell);
    fi;
  end;

  func Поле_ПриВходе(Cell :TemplateCell; Index :Integer; Action :Template.EnterTypes) :Logical;
    if (Cell.Contents = 'КТО'): ИзменитьТипОрганизации(Action);
      
    fi;
  end;

  func Поле_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    if (Cell.Contents = 'Период') and (Cell.Owner.Name = 'секцПериод_СЗП'):       Return ВывестиОтчетныйПериод(Cell);
    elsif (Cell.Contents = 'Период') and (Cell.Owner.Name = 'секцПериод_ФондЗП'): Return ВывестиОтчетныйПериод(Cell);
    elsif (Cell.Contents = 'Период') and (Cell.Owner.Name = 'секцПериод_СЗПРук'): Return ВывестиОтчетныйПериод(Cell);
    elsif (Cell.Contents = 'КТО'): Return ВывестиТипОрганизации;


    fi;
  end;

  func Поле_ПриВыводе_ЗаголовокОкнаФормы (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
    Return ПолучитьЗаголовокОкна;
  end;

  --= НАСТРОЙКА =--

  func Поле_ПриНажатии_ОбластьНастройки (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
    var локЧекЛистЭлемент: ТББ_Базовый.ЧекЛист.Элемент;
    if (Cell.Owner.Row[Cell.Row].Tag is ТББ_Базовый.ЧекЛист.Элемент):
      локЧекЛистЭлемент = Cell.Owner.Row[Cell.Row].Tag as ТББ_Базовый.ЧекЛист.Элемент;
      ИзменитьНастройку_ФлагВыбора(Cell, локЧекЛистЭлемент);
    fi;
  end;

  func Поле_ПриВходе_ОбластьНастройки (Cell :TemplateCell; Index :Integer; Action :Template.EnterTypes) :Logical;
    var локРезультатВыбора: Бюджет_Персонал.Справочники.ТипСтажа;
    if (интНастройка <> nil):
      if (Cell.Contents = 'ТипСтажа_Общий'):
        if (Action = Template.Clear):
          интНастройка.Record.ТипСтажа_Общий = nil;
        else
          if (CmOk = Бюджет_Персонал.Справочники.картТипыСтажа.ВыполнитьВыбор(локРезультатВыбора)):
            интНастройка.Record.ТипСтажа_Общий = локРезультатВыбора;
          fi;
        fi;
      elsif (Cell.Contents = 'ТипСтажа_Непрерывный'):
        if (Action = Template.Clear):
          интНастройка.Record.ТипСтажа_Непрерывный = nil;
        else
          if (CmOk = Бюджет_Персонал.Справочники.картТипыСтажа.ВыполнитьВыбор(локРезультатВыбора)):
            интНастройка.Record.ТипСтажа_Непрерывный = локРезультатВыбора;
          fi;
        fi;
      elsif (Cell.Contents = 'ШР'):
        ИзменитьНастройку_ШР(Action);
      fi;
    fi;
  end;

  proc Поле_ПриРисовании_ОбластьНастройки(Cell :TemplateCell; Selected :Logical; var Color :Integer; var FieldColor :Integer; Font :Font);
    var локЧекЛистЭлемент: ТББ_Базовый.ЧекЛист.Элемент;
    if (Cell.Owner.Row[Cell.Row].Tag is ТББ_Базовый.ЧекЛист.Элемент):
      локЧекЛистЭлемент = Cell.Owner.Row[Cell.Row].Tag as ТББ_Базовый.ЧекЛист.Элемент;
      if not (локЧекЛистЭлемент.OnOff as logical):
        inherited ПриРисовании_КакЗапрещенное(Cell, Selected, Color, FieldColor, Font);
      fi;
    fi;
  end;

  func Поле_ПриВыводе_ОбластьНастройки (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    var локЧекЛистЭлемент: ТББ_Базовый.ЧекЛист.Элемент;
    if (Cell.Owner.Row[Cell.Row].Tag is ТББ_Базовый.ЧекЛист.Элемент):
      локЧекЛистЭлемент = Cell.Owner.Row[Cell.Row].Tag as ТББ_Базовый.ЧекЛист.Элемент;
      if (Cell.Contents = 'КвалКатегория'):
        Return локЧекЛистЭлемент.ОписаниеПоЗаписи(ПравилаВыводаСтрокиНастройки, true);
      elsif (Cell.Contents in ['Первая','Вторая','Высшая']):
        Return локЧекЛистЭлемент.GetLinkData(Cell.Contents) as logical;
      elsif (Cell.Contents = 'УчСтепень'):
        Return локЧекЛистЭлемент.ОписаниеПоЗаписи(ПравилаВыводаСтрокиНастройки, true);
      elsif (Cell.Contents in ['КН','ДН']):
        Return локЧекЛистЭлемент.GetLinkData(Cell.Contents) as logical;
      elsif (Cell.Contents = 'ВидНачисления'):
        Return локЧекЛистЭлемент.ОписаниеПоЗаписи(ПравилаВыводаСтрокиНастройки, true);
      elsif (Cell.Contents = 'OnOff'):
        Return локЧекЛистЭлемент.OnOff as logical;
      elsif (Cell.Contents in ['НачисленияТариф',
                               'ДоплатаСовмещение',
                               'НачисленияИныеФед',
                               'НачисленияИныеРег',
                               'НачисленияПремии',
                               'ДоплатаСтаж',
                               'ДоплатаСМ',
                               'ДоплатаКвалКат',
                               'ДоплатаУС',
                               'ДоплатаНаставничество',
                               'ДоплатаМолодСпец',
                               'ВыплатыИныеСтимул',
                               'ВыплатыПрочие',
                               'ВыплатыКомпенс']):
        Return локЧекЛистЭлемент.GetLinkData(Cell.Contents) as logical;
      elsif (Cell.Contents = 'ВидБюджета'):
        Return локЧекЛистЭлемент.ОписаниеПоЗаписи(ПравилаВыводаСтрокиНастройки, true);
      elsif (Cell.Contents in ['Федеральный','СубъектаРФ','Муниципальный','ОМС','ИнойБюджет']):
        Return локЧекЛистЭлемент.GetLinkData(Cell.Contents) as logical;
      elsif (Cell.Contents = 'Должность'):
        Return локЧекЛистЭлемент.ОписаниеПоЗаписи(ПравилаВыводаСтрокиНастройки, true);
      elsif (Cell.Contents in ['Рук','Зам','ГлБух']):
        Return локЧекЛистЭлемент.GetLinkData(Cell.Contents) as logical;
      fi;
    else
      if (интНастройка <> nil):
        if (Cell.Contents = 'ТипСтажа_Общий'):
          Return интНастройка.ТипСтажа_Общий_Имя;
        elsif (Cell.Contents = 'ТипСтажа_Непрерывный'):
          Return интНастройка.ТипСтажа_Непрерывный_Имя;
        elsif (Cell.Contents = 'ШР'):
          Return интНастройка.ШтатноеРасписание_Имя;
        fi;
      fi;
    fi;
  end;

-- 2_Обработчики событий прочих объектов шаблона0. --

  proc тблНавигаторФреймовПриПермещении (Sender: Grid);
    var локЭлемент: Variant[];
    Template.BeginModify;
    локЭлемент = Sender.Current.Value as Variant[];
    if (локЭлемент <> nil):
      if (локЭлемент[1] <> ИмяКорняНавигатора): -- это не корень
        ИзменитьСервисныеКоманды(Sender.Current);
      fi;
    fi;
    inherited тблНавигаторФреймовПриПермещении(Sender);
    Template.EndModify;
  end;

  proc кнПриНажатии_Расчет (Sender: Button);
    Интерфейс.ВыполнениеРасчета;
  end;

  proc кнПриНажатии_XML (Sender: Button);
    СИоЗП.XML.Make(Record);
  end;

  proc кнПриНажатии_ДобавитьСведения (Sender: Button);
    var locGridValue: Variant[];
    var locGridName, locFrameName, locParentFrameName: string;
    if (тблНавигаторФреймов.Current <> nil):
      locGridValue = тблНавигаторФреймов.Current.Value as Variant[];
      locGridName = locGridValue[1] as String;
      locFrameName = locGridValue[2] as String;
      locParentFrameName = locGridValue[3] as String;
      if (locGridName = 'Раздел 1') or (Pos('Раздел1', locFrameName) > 0) or (Pos('Раздел1', locParentFrameName) > 0):
        ДобавитьСведения_Раздел1;
      elsif (locGridName = 'Раздел 2') or (Pos('Раздел2', locFrameName) > 0) or (Pos('Раздел2', locParentFrameName) > 0):
        ДобавитьСведения_Раздел2;
      elsif (locGridName = 'Раздел 3') or (Pos('Раздел3', locFrameName) > 0) or (Pos('Раздел3', locParentFrameName) > 0):
        ДобавитьСведения_Раздел3;
      fi;
    fi;
  end;


  proc кнСохранитьНастройку_ПриНажатии (Sender: Button);
    if (интНастройка <> nil):
      if СИС2.ФункцииДокумента.RecordIsModified(интНастройка.Record):
        интНастройка.PostRecord;
      fi;
      Модифицировать_кнСохранитьНастройку;
    fi;
  end;

  proc кнОтменитьНастройку_ПриНажатии (Sender: Button);
    if (интНастройка <> nil):
      if СИС2.ФункцииДокумента.RecordIsModified(интНастройка.Record):
        интНастройка.CancelRecord;
      fi;
      Модифицировать_СтраницуНастройки;
      Модифицировать_кнСохранитьНастройку;
    fi;
  end;

  proc кнВосстановитьНастройку_ПриНажатии (Sender: Button);
    if (интНастройка <> nil):
      СИС2.ФункцииДокумента.RecordModify(интНастройка.Record);
      интНастройка.ВосстановитьНастройкуПоУмолчанию(true);
      Модифицировать_СтраницуНастройки;
      Модифицировать_кнСохранитьНастройку;
    fi;
  end;

-- 2_Дополнительные команды0. --

-- 2_Вспомогательные методы0. --

  -- модификаторы  GUI --

  proc ИнициализироватьПравилаВывода;
    var locArgument: variant[];
    with ТББ_Базовый.ЧекЛист.ПравилаОформления  do
      locArgument[аргСворачиватьСтроки] = false;
      locArgument[аргВыделитьГруппы] = true;
      locArgument[аргЗапретитьГруппы] = true;
      locArgument[аргПовторятьВыборВЭлементах] = false;
      ПравилаВыводаСтрокиНастройки = CreateEx(locArgument);
    end;
  end;

  proc МодифицироватьШаблон (ШаблонМодифицирован: Logical = false); -- ВИД ФОРМЫ
    МодифицироватьШаблон_ФреймыРаздел1(false);
    МодифицироватьШаблон_ФреймыРаздел2(false);
    МодифицироватьШаблон_ФреймыРаздел3(false);
    Модифицировать_СтраницуНастройки;
  end;

  proc МодифицироватьШаблон_ФреймыРаздел1(локОбновитьНавигатор: logical);
    картШаблона_Раздел1.Filter = 'фСИоЗП=' + Str(Self.Record);
    if (картШаблона_Раздел1.ColumnsCount = 0):
      картШаблона_Раздел1.Font.Size = БиблиотекаСтилей.StyleByName('Текст шаблона').Font.Size;
      картШаблона_Раздел1.Font.Bold = true;
      картШаблона_Раздел1.Align = true;
      картШаблона_Раздел1.Order = 'Работник.ФамилияФизлица;ОтчетныйПериод.Код';
      -- столбцы --
      ДобавитьСтолбецКартотеки_Раздел1_Работник_Фамилия;
      ДобавитьСтолбецКартотеки_Раздел1_Работник_Имя;
      ДобавитьСтолбецКартотеки_Раздел1_Работник_Отчество;
      ДобавитьСтолбецКартотеки_Раздел1_ОтчетныйПериод;
      ДобавитьСтолбецКартотеки_Раздел1_СНИЛС;
      ДобавитьСтолбецКартотеки_Раздел1_НачисленияТариф;
      ДобавитьСтолбецКартотеки_Раздел1_ДоплатаСовмещение;
      ДобавитьСтолбецКартотеки_Раздел1_НачисленияИныеФед;
      ДобавитьСтолбецКартотеки_Раздел1_НачисленияИныеРег;
      ДобавитьСтолбецКартотеки_Раздел1_НачисленияПремии;
      ДобавитьСтолбецКартотеки_Раздел1_ДоплатаСтаж;
      ДобавитьСтолбецКартотеки_Раздел1_ДоплатаСМ;
      ДобавитьСтолбецКартотеки_Раздел1_ДоплатаКвалКат;
      ДобавитьСтолбецКартотеки_Раздел1_ДоплатаУС;
      ДобавитьСтолбецКартотеки_Раздел1_ДоплатаНаставничество;
      ДобавитьСтолбецКартотеки_Раздел1_ДоплатаМолодСпец;
      ДобавитьСтолбецКартотеки_Раздел1_ВыплатыИныеСтимул;
      ДобавитьСтолбецКартотеки_Раздел1_ВыплатыПрочие;
      ДобавитьСтолбецКартотеки_Раздел1_ВыплатыКомпенс;
      ДобавитьСтолбецКартотеки_Раздел1_НачисленияИтого;
    fi;
  end;

  proc МодифицироватьШаблон_ФреймыРаздел2(локОбновитьНавигатор: logical);
    картШаблона_Раздел2.Filter = 'фСИоЗП=' + Str(Self.Record);
    if (картШаблона_Раздел2.ColumnsCount = 0):
      картШаблона_Раздел2.Font.Size = БиблиотекаСтилей.StyleByName('Текст шаблона').Font.Size;
      картШаблона_Раздел2.Font.Bold = true;
      картШаблона_Раздел2.Align = true;
      картШаблона_Раздел2.Order = 'ОтчетныйПериод.Код';
      -- столбцы --
      ДобавитьСтолбецКартотеки_Раздел2_ОтчетныйПериод;
      ДобавитьСтолбецКартотеки_Раздел2_РасхОбщВсего;
      ДобавитьСтолбецКартотеки_Раздел2_РасхКатВсего;
    fi;
  end;

  proc МодифицироватьШаблон_ФреймыРаздел3(локОбновитьНавигатор: logical);
    картШаблона_Раздел3.Filter = 'фСИоЗП=' + Str(Self.Record);
    if (картШаблона_Раздел3.ColumnsCount = 0):
      картШаблона_Раздел3.Font.Size = БиблиотекаСтилей.StyleByName('Текст шаблона').Font.Size;
      картШаблона_Раздел3.Font.Bold = true;
      картШаблона_Раздел3.Align = true;
      картШаблона_Раздел3.Order = 'ОтчетныйПериод.Код';
      -- столбцы --
      ДобавитьСтолбецКартотеки_Раздел3_ОтчетныйПериод;
    fi;
  end;

  proc Модифицировать_СтраницуНастройки;
    var i, ii, c, cc: integer;
    var locIsGroup: logical;
    var locCell: TemplateCell;
    интНастройка = Настройки.интСИоЗП.OpenForSubject(Record.НашеУчреждение);
    -- Квалификационные категории --
    секцКвалКатегория.RowsCount = 1;
    ii = интНастройка.ПолучитьКоличествоКвалКатегорий;
    CloneFirstRows(секцКвалКатегория, ii);
    for i = 1 .. ii do
      секцКвалКатегория.Row[i].Tag = интНастройка.КвалКатегорияВРасчете[i];
    od;
    -- Ученые степени --
    секцУчСтепень.RowsCount = 1;
    ii = интНастройка.ПолучитьКоличествоУчСтепеней;
    CloneFirstRows(секцУчСтепень, ii);
    for i = 1 .. ii do
      секцУчСтепень.Row[i].Tag = интНастройка.УчСтепеньВРасчете[i];
    od;
    -- Виды начислений --
    секцВидНачисления.RowsCount = 1;
    ii = интНастройка.ПолучитьКоличествоВидовНачислений;
    CloneFirstRows(секцВидНачисления, ii);
    cc = секцВидНачисления.ColumnsCount;
    for i = 1 .. ii do
      секцВидНачисления.Row[i].Tag = интНастройка.НачислениеВРасчете[i];
      locIsGroup = интНастройка.НачислениеВРасчете[i].Record.IsGroup;
      for c = 1 .. cc do  -- перебор столбцов
        locCell = секцВидНачисления.Cell[c,i];
        if (c in [4,6,7,8,9,10,11,12,13,14,15,16,17,18,19]): -- явное форматирование клетки чек-бокса
          if locIsGroup:
            locCell.FieldType = Template.StringField;
            locCell.OnOutput = '';
            locCell.Enabled = false;
            locCell.CellType = Template.CalcFieldCell;
          else
            locCell.FieldType = Template.LogicalField;
            locCell.OnOutput = 'Поле_ПриВыводе_ОбластьНастройки';
            locCell.Enabled = not c in [4];
            locCell.CellType = Template.CalcFieldCell;
          fi;
        fi;
      od;
    od;
    -- Бюджеты --
    секцВидБюджета.RowsCount = 1;
    ii = интНастройка.ПолучитьКоличествоБюджетов;
    CloneFirstRows(секцВидБюджета, ii);
    for i = 1 .. ii do
      секцВидБюджета.Row[i].Tag = интНастройка.БюджетВРасчете[i];
    od;
    -- Должности --
    секцДолжность.RowsCount = 1;
    ii = интНастройка.ПолучитьКоличествоДолжностей;
    CloneFirstRows(секцДолжность, ii);
    for i = 1 .. ii do
      секцДолжность.Row[i].Tag = интНастройка.ДолжностьВРасчете[i];
    od;
    --
    Модифицировать_кнСохранитьНастройку;
  end;

  proc ИзменитьНадписьТекущегоФрейма (locGridItem: GridItem);
    var locGridValue: Variant[];
    var locFrameName, locParentFrameName: string;
    locGridValue = locGridItem.Value as Variant[];
    locFrameName = locGridValue[2] as String;
    locParentFrameName = locGridValue[3] as String;
    if    'фреймРаздел1'     in [locFrameName,locParentFrameName]: НадписьТекущегоФрейма = 'Сведения о заработной плате работников';
    elsif 'фреймРаздел2'     in [locFrameName,locParentFrameName]: НадписьТекущегоФрейма = 'Сведения о фонде заработной платы';
    elsif 'фреймРаздел3'     in [locFrameName,locParentFrameName]: НадписьТекущегоФрейма = 'Сведения о заработной плате руководителей, заместителей руководителей и главного бухгалтера учреждения';
    else
      inherited ИзменитьНадписьТекущегоФрейма(locGridItem);
    fi;
  end;


  proc ДобавитьСтолбецКартотеки_Раздел1_Работник_Фамилия;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'Работник.ФамилияФизлица';
      Caption = 'Фамилия';
      Hint = '';
      Width = 0;
      MinWidth = 60;
      Alignment = Template.LeftAlign;
      FieldType = Template.ReferenceField;
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_Работник_Имя;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'Работник.ИмяФизлица';
      Caption = 'Фамилия';
      Hint = '';
      Width = 0;
      MinWidth = 60;
      Alignment = Template.LeftAlign;
      FieldType = Template.ReferenceField;
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_Работник_Отчество;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'Работник.ОтчествоФизлица';
      Caption = 'Фамилия';
      Hint = '';
      Width = 0;
      MinWidth = 60;
      Alignment = Template.LeftAlign;
      FieldType = Template.ReferenceField;
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_ОтчетныйПериод;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'ОтчетныйПериод.Имя';
      Caption = 'Отчетный период';
      Hint = '';
      Width = 0;
      MinWidth = 60;
      Alignment = Template.LeftAlign;
      FieldType = Template.ReferenceField;
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_СНИЛС;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'СНИЛС';
      Caption = 'С Н И Л С';
      Hint = '';
      Width = 110;
      MinWidth = 110;
      Alignment = Template.CenterAlign;
      FieldType = Template.StringField;
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_НачисленияТариф;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'НачисленияТариф';
      Caption = 'Оклад, тариф';
      Hint = 'Начисления по тарифным ставкам';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_ДоплатаСовмещение;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'ДоплатаСовмещение';
      Caption = 'Совмещение';
      Hint = 'Доплата за совмещение';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_НачисленияИныеФед;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'НачисленияИныеФед';
      Caption = 'Компенс.выпл.(фед.)';
      Hint = 'Иные компенсационные выплаты (федеральные)';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_НачисленияИныеРег;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'НачисленияИныеРег';
      Caption = 'Компенс.выпл.(рег.)';
      Hint = 'Иные компенсационные выплаты (региональные)';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_НачисленияПремии;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'НачисленияПремии';
      Caption = 'Премии';
      Hint = 'НачисленияПремии';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_ДоплатаСтаж;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'ДоплатаСтаж';
      Caption = 'Доплата за стаж';
      Hint = 'Доплата за непрерывный стаж';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_ДоплатаСМ;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'ДоплатаСМ';
      Caption = '"Сельские"';
      Hint = 'Доплата за работу в сельской местности';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_ДоплатаКвалКат;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'ДоплатаКвалКат';
      Caption = 'За квалификацию';
      Hint = 'Надбавка за наличие квалификационной категории';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_ДоплатаУС;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'ДоплатаУС';
      Caption = 'За уч.степень';
      Hint = 'Надбавка за наличие ученой степени';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_ДоплатаНаставничество;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'ДоплатаНаставничество';
      Caption = 'За наставн.';
      Hint = 'Надбавка за наставничество';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_ДоплатаМолодСпец;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'ДоплатаМолодСпец';
      Caption = 'Доплата мол.сп.';
      Hint = 'Доплата молодым специалистам';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_ВыплатыИныеСтимул;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'ВыплатыИныеСтимул';
      Caption = 'Иные выпл.';
      Hint = 'Иные стимулирующие выплаты';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_ВыплатыПрочие;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'ВыплатыПрочие';
      Caption = 'Прочие выпл.';
      Hint = 'Прочие выплаты';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_ВыплатыКомпенс;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'ВыплатыКомпенс';
      Caption = '"Районные"';
      Hint = 'Компенсационные выплаты по районному регулированию';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Visible = false;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_НачисленияИтого;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'НачисленияИтого';
      Caption = 'Итого';
      Hint = 'Итого начисления';
      Width = 80;
      MinWidth = 80;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Font.Bold = true;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел2_ОтчетныйПериод;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел2;
    with locOwner.AddColumn do
      FieldName = 'ОтчетныйПериод.Имя';
      Caption = 'Отчетный период';
      Hint = '';
      Width = 0;
      MinWidth = 200;
      Alignment = Template.LeftAlign;
      FieldType = Template.ReferenceField;
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел2_РасхОбщВсего;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел2;
    with locOwner.AddColumn do
      FieldName = 'РасхОбщВсего';
      Caption = 'ФЗП всего';
      Hint = 'ФЗП на всех работников';
      Width = 160;
      MinWidth = 160;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Font.Bold = true;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел2_РасхКатВсего;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел2;
    with locOwner.AddColumn do
      FieldName = 'РасхКатВсего';
      Caption = 'ФЗП "указных" категорий';
      Hint = 'ФЗП "указных" категорий персонала';
      Width = 160;
      MinWidth = 160;
      Alignment = Template.RightAlign;
      FieldType = Template.NumericField;
      Format = ',##0.00;;-';
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
      Font.Bold = true;
      CanSummary = true;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел3_ОтчетныйПериод;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел3;
    with locOwner.AddColumn do
      FieldName = 'ОтчетныйПериод.Имя';
      Caption = 'Отчетный период';
      Hint = '';
      Width = 0;
      MinWidth = 200;
      Alignment = Template.LeftAlign;
      FieldType = Template.ReferenceField;
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
    end;
  end;

  proc Модифицировать_кнСохранитьНастройку;
    if (интНастройка <> nil):
      кнСохранитьНастройку.Enabled = СИС2.ФункцииДокумента.RecordIsModified(интНастройка.Record);
      кнОтменитьНастройку.Enabled = СИС2.ФункцииДокумента.RecordIsModified(интНастройка.Record);
    fi;
  end;


  -- ввод / вывод в клетках --

  func ПолучитьЗаголовокОкна: string;
    var aTxt: string[];
    AddsInArray(aTxt, ПолучитьЗаголовокОкна_СтандартнаяЧасть);
    AddsInArray(aTxt, ПолучитьЗаголовокОкна_СведенияОПериоде1);
    AddsInArray(aTxt, ПолучитьЗаголовокОкна_СведенияОПериоде2);
    AddsInArray(aTxt, ПолучитьЗаголовокОкна_СведенияОПериоде3);
    Return МассивСтрокВТекст(aTxt);
  end;

  func ПолучитьЗаголовокОкна_СтандартнаяЧасть: string[];
    Result[1] = if( (НашеУчреждение = nil), '<b->Налоговый агент не указан', '<b->' + НашеУчреждение.Имя);
    Result[2] = '<b+>' + 'Сбор информации о заработной плате работников государственных и муниципальных учреждений';
  end;

  func ПолучитьЗаголовокОкна_СведенияОПериоде1: string[];
    var локВведенныеОтчетныеПериоды: ТББ_Базовый.Справочники.ПериодыРасчета[];
    var i, ii: integer;
    var aTxt: string[];
    локВведенныеОтчетныеПериоды = ReadStructField(Период_СЗП) as ТББ_Базовый.Справочники.ПериодыРасчета[];
    ii = LengthOfArray(локВведенныеОтчетныеПериоды);
    for i = 1 .. ii do
      if (локВведенныеОтчетныеПериоды[i] <> nil):
        if (i = 1):
          AddInArray(aTxt, локВведенныеОтчетныеПериоды[i].Имя);
        elsif (i = ii):
          AddInArray(aTxt, локВведенныеОтчетныеПериоды[i].Имя);
        fi;
      fi;
    od;
    if LengthOfArray(локВведенныеОтчетныеПериоды) = 0:
      Result[1] = '<s-><s->Отчетный период (р.1):   <b+>НЕ УКАЗАН<b->';
    elsif LengthOfArray(локВведенныеОтчетныеПериоды) = 1:
      Result[1] = '<s-><s-><b->Отчетный период (р.1):   ' + aTxt[1];
    elsif LengthOfArray(локВведенныеОтчетныеПериоды) > 1:
      Result[1] = '<s-><s-><b->Отчетные периоды (р.1): ' + ТББ_Базовый.СтроковыеФункции.МассивСтрокВСтроку(aTxt, false, ' - ', false);
    fi;
  end;

  func ПолучитьЗаголовокОкна_СведенияОПериоде2: string[];
    var локВведенныеОтчетныеПериоды: ТББ_Базовый.Справочники.ПериодыРасчета[];
    var i, ii: integer;
    var aTxt: string[];
    локВведенныеОтчетныеПериоды = ReadStructField(Период_ФондЗП) as ТББ_Базовый.Справочники.ПериодыРасчета[];
    ii = LengthOfArray(локВведенныеОтчетныеПериоды);
    for i = 1 .. ii do
      if (локВведенныеОтчетныеПериоды[i] <> nil):
        if (i = 1):
          AddInArray(aTxt, локВведенныеОтчетныеПериоды[i].Имя);
        elsif (i = ii):
          AddInArray(aTxt, локВведенныеОтчетныеПериоды[i].Имя);
        fi;
      fi;
    od;
    if LengthOfArray(локВведенныеОтчетныеПериоды) = 0:
      Result[1] = 'Отчетный период (р.2):   <b+>НЕ УКАЗАН<b->';
    elsif LengthOfArray(локВведенныеОтчетныеПериоды) = 1:
      Result[1] = 'Отчетный период (р.2):   ' + aTxt[1];
    elsif LengthOfArray(локВведенныеОтчетныеПериоды) > 1:
      Result[1] = 'Отчетные периоды (р.2): ' + ТББ_Базовый.СтроковыеФункции.МассивСтрокВСтроку(aTxt, false, ' - ', false);
    fi;
  end;

  func ПолучитьЗаголовокОкна_СведенияОПериоде3: string[];
    var локВведенныеОтчетныеПериоды: ТББ_Базовый.Справочники.ПериодыРасчета[];
    var i, ii: integer;
    var aTxt: string[];
    локВведенныеОтчетныеПериоды = ReadStructField(Период_СЗПРук) as ТББ_Базовый.Справочники.ПериодыРасчета[];
    ii = LengthOfArray(локВведенныеОтчетныеПериоды);
    for i = 1 .. ii do
      if (локВведенныеОтчетныеПериоды[i] <> nil):
        if (i = 1):
          AddInArray(aTxt, локВведенныеОтчетныеПериоды[i].Имя);
        elsif (i = ii):
          AddInArray(aTxt, локВведенныеОтчетныеПериоды[i].Имя);
        fi;
      fi;
    od;
    if LengthOfArray(локВведенныеОтчетныеПериоды) = 0:
      Result[1] = 'Отчетный период (р.3):   <b+>НЕ УКАЗАН<b->';
    elsif LengthOfArray(локВведенныеОтчетныеПериоды) = 1:
      Result[1] = 'Отчетный период (р.3):   ' + aTxt[1];
    elsif LengthOfArray(локВведенныеОтчетныеПериоды) > 1:
      Result[1] = 'Отчетные периоды (р.3): ' + ТББ_Базовый.СтроковыеФункции.МассивСтрокВСтроку(aTxt, false, ' - ', false);
    fi;
  end;

  proc ПодготовитьПериодыЗаГод;
    var locValue: string;
    var locValArray: string[2];
    var локОтчетныйПериод: ТББ_Базовый.Справочники.ПериодыРасчета;
    with ТББ_Отчетность.Константы do
      locValArray= [[ТипПериодаГод]];
    end;
    if CmOk = ТББ_Отчетность.Библио.ВыборОтчетногоПериода(locValue, locValArray, ДатаНачалаАктуальности, ДатаОкончанияАктуальности, false):
      локОтчетныйПериод = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue);
      if (локОтчетныйПериод <> nil):
        Период_ФондЗП.Clear;
        Период_ФондЗП[Период_ФондЗП.Add] = локОтчетныйПериод;
        Период_СЗПРук.Clear;
        Период_СЗПРук[Период_СЗПРук.Add] = локОтчетныйПериод;
        Период_СЗП.Clear;
        Период_СЗП[Период_СЗП.Add] = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue + '.1.01');
        Период_СЗП[Период_СЗП.Add] = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue + '.1.02');
        Период_СЗП[Период_СЗП.Add] = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue + '.1.03');
        Период_СЗП[Период_СЗП.Add] = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue + '.2.04');
        Период_СЗП[Период_СЗП.Add] = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue + '.2.05');
        Период_СЗП[Период_СЗП.Add] = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue + '.2.06');
        Период_СЗП[Период_СЗП.Add] = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue + '.3.07');
        Период_СЗП[Период_СЗП.Add] = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue + '.3.08');
        Период_СЗП[Период_СЗП.Add] = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue + '.3.09');
        Период_СЗП[Период_СЗП.Add] = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue + '.4.10');
        Период_СЗП[Период_СЗП.Add] = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue + '.4.11');
        Период_СЗП[Период_СЗП.Add] = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue + '.4.12');
      fi;
    fi;
  end;

  func ДобавитьОтчетныйМесяц: string;
    var locValue: string;
    var locValArray: string[2];
    var локОтчетныйПериод: ТББ_Базовый.Справочники.ПериодыРасчета;
    var локВведенныеОтчетныеПериоды: ТББ_Базовый.Справочники.ПериодыРасчета[];
    with ТББ_Отчетность.Константы do
      locValArray= [[ТипПериодаМесяц01, 'январь'], [ТипПериодаМесяц02, 'февраль'], [ТипПериодаМесяц03, 'март'],
                    [ТипПериодаМесяц04, 'апрель'], [ТипПериодаМесяц05, 'май'],     [ТипПериодаМесяц06, 'июнь'],
                    [ТипПериодаМесяц07, 'июль'],   [ТипПериодаМесяц08, 'август'],  [ТипПериодаМесяц09, 'сентябрь'],
                    [ТипПериодаМесяц10, 'октябрь'],[ТипПериодаМесяц11, 'ноябрь'],  [ТипПериодаМесяц12, 'декабрь']];
    end;
    if CmOk = ТББ_Отчетность.Библио.ВыборОтчетногоПериода(locValue, locValArray, ДатаНачалаАктуальности, ДатаОкончанияАктуальности, false):
      локОтчетныйПериод = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue);
      локВведенныеОтчетныеПериоды = ReadStructField(Период_СЗП) as ТББ_Базовый.Справочники.ПериодыРасчета[];
      if (локОтчетныйПериод <> nil) and (not локОтчетныйПериод in локВведенныеОтчетныеПериоды):
        Период_СЗП[Период_СЗП.Add] = локОтчетныйПериод;
      else
        DisplayMessage('Выбран недопустимый период. Возможно, выбранный период уже есть в списке отченых перииодов.');
      fi;
    fi;
  end;

  func ДобавитьОтчетныйГод (locStb: Subtable): string;
    var locValue: string;
    var locValArray: string[2];
    var локОтчетныйПериод: ТББ_Базовый.Справочники.ПериодыРасчета;
    var локВведенныеОтчетныеПериоды: ТББ_Базовый.Справочники.ПериодыРасчета[];
    with ТББ_Отчетность.Константы do
      locValArray= [[ТипПериодаГод]];
    end;
    if CmOk = ТББ_Отчетность.Библио.ВыборОтчетногоПериода(locValue, locValArray, ДатаНачалаАктуальности, ДатаОкончанияАктуальности, false):
      локОтчетныйПериод = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue);
      локВведенныеОтчетныеПериоды = ReadStructField(locStb) as ТББ_Базовый.Справочники.ПериодыРасчета[];
      if (локОтчетныйПериод <> nil) and (not локОтчетныйПериод in локВведенныеОтчетныеПериоды):
        locStb[locStb.Add] = локОтчетныйПериод;
      else
        DisplayMessage('Выбран недопустимый период. Возможно, выбранный период уже есть в списке отченых перииодов.');
      fi;
    fi;
  end;

  func ВывестиОтчетныйПериод (Cell: TemplateCell): string;
    if (Cell.Frame > 0) and (Cell.Frame <= Cell.Owner.Subtable.Count):
      if (Cell.Owner.Subtable.Items[Cell.Frame] <> nil):
        Return (Cell.Owner.Subtable.Items[Cell.Frame] as ТББ_Базовый.Справочники.ПериодыРасчета).Имя;
      fi;
    fi;
  end;

  proc УдалитьОтчетныйПериод (Cell: TemplateCell);
    var index: integer;
    index = Cell.Frame;
    if (index > 0) and (index <= Cell.Owner.Subtable.Count):
      Cell.Owner.Subtable.Delete(index);
    fi;
  end;

  proc ИзменитьТипОрганизации (Action :Template.EnterTypes);
    var locRecord :Справочники.Росстат.КТО;
    if (Action = Template.Clear):
      КТО = nil;
    else
      locRecord = QueryRecord(Справочники.Росстат.КТО, 'Код="' +  КТО + '"');
      if cmOk = Справочники.Росстат.картКТО.ВыполнитьВыбор(locRecord):
        КТО = locRecord.Код;
      fi;
    fi;
  end;

  func ВывестиТипОрганизации: string;
    var locRecord :Справочники.Росстат.КТО;
    if (КТО <> nil):
      locRecord = QueryRecord(Справочники.Росстат.КТО, 'Код="' +  КТО + '"');
      if (locRecord <> nil):
        Return '[' + locRecord.Код + '] ' + locRecord.Имя;
      fi;
    fi;
  end;

  proc ИзменитьНастройку_ШР (Action: Template.EnterTypes);
    var R: Бюджет_Персонал.Справочники.ШтатноеРасписание;
    if (интНастройка <> nil):
      if (Action <> Template.Clear):
        R = интНастройка.ШтатноеРасписание;
        if (CmOk = Бюджет_Персонал.ШтатноеРасписание.картШР.ВыполнитьВыборШР(R, НашеУчреждение, true)):
          интНастройка.Record.ШтатноеРасписание = R;
        fi;
      else
        интНастройка.Record.ШтатноеРасписание = nil;
      fi;
      Модифицировать_кнСохранитьНастройку;
    fi;
  end;

  proc ИзменитьНастройку_ФлагВыбора (Cell: TemplateCell; локЧекЛистЭлемент: ТББ_Базовый.ЧекЛист.Элемент);
    if (Cell.Contents in ['Первая','Вторая','Высшая']):
      if локЧекЛистЭлемент.GetLinkData(Cell.Contents) as logical:
        ИзменитьНастройку_ФлагВыбораКатегории_СброситьВсе(локЧекЛистЭлемент);
      else
        ИзменитьНастройку_ФлагВыбораКатегории_СброситьВсе(локЧекЛистЭлемент);
        локЧекЛистЭлемент.SetLinkData(Cell.Contents, true);
      fi;
    elsif (Cell.Contents in ['КН','ДН']):
      if локЧекЛистЭлемент.GetLinkData(Cell.Contents) as logical:
        ИзменитьНастройку_ФлагВыбораУчСтепени_СброситьВсе(локЧекЛистЭлемент);
      else
        ИзменитьНастройку_ФлагВыбораУчСтепени_СброситьВсе(локЧекЛистЭлемент);
        локЧекЛистЭлемент.SetLinkData(Cell.Contents, true);
      fi;
    elsif (Cell.Contents in ['НачисленияТариф',
                             'ДоплатаСовмещение',
                             'НачисленияИныеФед',
                             'НачисленияИныеРег',
                             'НачисленияПремии',
                             'ДоплатаСтаж',
                             'ДоплатаСМ',
                             'ДоплатаКвалКат',
                             'ДоплатаУС',
                             'ДоплатаНаставничество',
                             'ДоплатаМолодСпец',
                             'ВыплатыИныеСтимул',
                             'ВыплатыПрочие',
                             'ВыплатыКомпенс']):
      if локЧекЛистЭлемент.GetLinkData(Cell.Contents) as logical:
        ИзменитьНастройку_ФлагВыбораНачисления_СброситьВсе(локЧекЛистЭлемент);
      else
        ИзменитьНастройку_ФлагВыбораНачисления_СброситьВсе(локЧекЛистЭлемент);
        локЧекЛистЭлемент.SetLinkData(Cell.Contents, true);
        локЧекЛистЭлемент.SetOnOff(true);
      fi;
    elsif (Cell.Contents in ['Федеральный','СубъектаРФ','Муниципальный','ОМС','ИнойБюджет']):
      if локЧекЛистЭлемент.GetLinkData(Cell.Contents) as logical:
        ИзменитьНастройку_ФлагВыбораБюджета_СброситьВсе(локЧекЛистЭлемент);
      else
        ИзменитьНастройку_ФлагВыбораБюджета_СброситьВсе(локЧекЛистЭлемент);
        локЧекЛистЭлемент.SetLinkData(Cell.Contents, true);
      fi;
    elsif (Cell.Contents in ['Рук','Зам','ГлБух']):
      if локЧекЛистЭлемент.GetLinkData(Cell.Contents) as logical:
        ИзменитьНастройку_ФлагВыбораДолжности_СброситьВсе(локЧекЛистЭлемент);
      else
        ИзменитьНастройку_ФлагВыбораДолжности_СброситьВсе(локЧекЛистЭлемент);
        локЧекЛистЭлемент.SetLinkData(Cell.Contents, true);
      fi;
    fi;
    if (интНастройка <> nil):
      RecordModify(интНастройка.Record);
      Модифицировать_кнСохранитьНастройку;
    fi;
  end;

  proc ИзменитьНастройку_ФлагВыбораКатегории_СброситьВсе (локЧекЛистЭлемент: ТББ_Базовый.ЧекЛист.Элемент);
    локЧекЛистЭлемент.SetLinkData('Первая', false);
    локЧекЛистЭлемент.SetLinkData('Вторая', false);
    локЧекЛистЭлемент.SetLinkData('Высшая', false);
 end;

  proc ИзменитьНастройку_ФлагВыбораУчСтепени_СброситьВсе (локЧекЛистЭлемент: ТББ_Базовый.ЧекЛист.Элемент);
    локЧекЛистЭлемент.SetLinkData('КН', false);
    локЧекЛистЭлемент.SetLinkData('ДН', false);
 end;

  proc ИзменитьНастройку_ФлагВыбораНачисления_СброситьВсе (локЧекЛистЭлемент: ТББ_Базовый.ЧекЛист.Элемент);
    локЧекЛистЭлемент.SetLinkData('НачисленияТариф', false);
    локЧекЛистЭлемент.SetLinkData('ДоплатаСовмещение', false);
    локЧекЛистЭлемент.SetLinkData('НачисленияИныеФед', false);
    локЧекЛистЭлемент.SetLinkData('НачисленияИныеРег', false);
    локЧекЛистЭлемент.SetLinkData('НачисленияПремии', false);
    локЧекЛистЭлемент.SetLinkData('ДоплатаСтаж', false);
    локЧекЛистЭлемент.SetLinkData('ДоплатаСМ', false);
    локЧекЛистЭлемент.SetLinkData('ДоплатаКвалКат', false);
    локЧекЛистЭлемент.SetLinkData('ДоплатаУС', false);
    локЧекЛистЭлемент.SetLinkData('ДоплатаНаставничество', false);
    локЧекЛистЭлемент.SetLinkData('ДоплатаМолодСпец', false);
    локЧекЛистЭлемент.SetLinkData('ВыплатыИныеСтимул', false);
    локЧекЛистЭлемент.SetLinkData('ВыплатыПрочие', false);
    локЧекЛистЭлемент.SetLinkData('ВыплатыКомпенс', false);
    локЧекЛистЭлемент.SetOnOff(false);
  end;

  proc ИзменитьНастройку_ФлагВыбораБюджета_СброситьВсе (локЧекЛистЭлемент: ТББ_Базовый.ЧекЛист.Элемент);
    локЧекЛистЭлемент.SetLinkData('Федеральный', false);
    локЧекЛистЭлемент.SetLinkData('СубъектаРФ', false);
    локЧекЛистЭлемент.SetLinkData('Муниципальный', false);
    локЧекЛистЭлемент.SetLinkData('ОМС', false);
    локЧекЛистЭлемент.SetLinkData('ИнойБюджет', false);
 end;

  proc ИзменитьНастройку_ФлагВыбораДолжности_СброситьВсе (локЧекЛистЭлемент: ТББ_Базовый.ЧекЛист.Элемент);
    локЧекЛистЭлемент.SetLinkData('Рук', false);
    локЧекЛистЭлемент.SetLinkData('Зам', false);
    локЧекЛистЭлемент.SetLinkData('ГлБух', false);
 end;


  -- управление картотеками шаблона --


  proc ДобавитьСведения_Раздел1;
    var локДатаНачала, локДатаОкончания: date;
    var локОтчетныеПериоды: ТББ_Базовый.Справочники.ПериодыРасчета[];
    var мСотрудник: Базовый.Данные.Субъект[];
    var f, p :integer;
    var newPosition :storage[];
    var locStorage :Storage;
    var локПериод      :ТББ_Базовый.Справочники.ПериодыРасчета;
    var локНазначение  :Бюджет_Персонал.АтрибутыСотрудника.Назначение;
    ПолучитьГраницыПериодов_Раздел1(локДатаНачала, локДатаОкончания);
    локОтчетныеПериоды = ReadStructField(Период_СЗП) as ТББ_Базовый.Справочники.ПериодыРасчета[];
    if (CmOk = ТББ_Базовый.Справочники.Субъект.картСотрудник.ВыполнитьВыбор(мСотрудник, НашеУчреждение,,,,'not ЭтоОфицер')): -- сотрудник (сотрудники) выбраны
      for f = 1 .. LengthOfArray(мСотрудник) do
        if cmOk = Служебные.СИоЗП.блУточнениеСЗП.УточнитьДобавляемыеДанные(Self.Record, мСотрудник[f], локОтчетныеПериоды, newPosition):
          for p = 1 .. LengthOfArray(newPosition) do
            locStorage = newPosition[p];
            локПериод     = locStorage.Период as ТББ_Базовый.Справочники.ПериодыРасчета;
            локНазначение = locStorage.Назначение as Бюджет_Персонал.АтрибутыСотрудника.Назначение;
            Отчетность.интСЗП.CreateByOwner(Self.Record, локПериод, локНазначение, true);
          od;
        fi;
      od;
    fi;
  end;

  proc ПолучитьГраницыПериодов_Раздел1 (var локДатаНачала, локДатаОкончания: date);
    var i: integer;
    for i = 1 .. Период_СЗП.Count do
      if (Период_СЗП[i] <> nil):
        if (локДатаНачала = nil):
          локДатаНачала = Период_СЗП[i].ДатаНачала;
        else
          локДатаНачала = Min([локДатаНачала, Период_СЗП[i].ДатаНачала]);
        fi;
        локДатаОкончания = Max([локДатаОкончания, Период_СЗП[i].ДатаОкончания]);
      fi;
    od;
  end;

  proc ДобавитьСведения_Раздел2;
    var i: integer;
    var локПериод: ТББ_Базовый.Справочники.ПериодыРасчета;
    var locAltValue: string[];
    var locAltChoice: integer;
    if (Self.Record.Период_ФондЗП.Count = 0):
      DisplayMessage('Не указаны отчетные периоды р.2 на закладке "Реквизиты"!');
      Return;
    else
      for i = 1 .. Self.Record.Период_ФондЗП.Count do
        locAltValue[i] = Self.Record.Период_ФондЗП[i].Код;
      od;
      locAltChoice = Alternate('Выберите отчетный год', locAltValue);
      if (locAltChoice > 0):
        локПериод = СИС2.ФункцииДокумента.QueryRecord(ТББ_Базовый.Справочники.ПериодыРасчета, 'Код="' + locAltValue[locAltChoice] + '"');
        if (локПериод <> nil):
          Отчетность.интФондЗП.CreateByOwner(Self.Record, локПериод, true);
        fi;
      fi;
    fi;
  end;

  proc ДобавитьСведения_Раздел3;
    var i: integer;
    var локПериод: ТББ_Базовый.Справочники.ПериодыРасчета;
    var locAltValue: string[];
    var locAltChoice: integer;
    if (Self.Record.Период_СЗПРук.Count = 0):
      DisplayMessage('Не указаны отчетные периоды р.3 на закладке "Реквизиты"!');
      Return;
    else
      for i = 1 .. Self.Record.Период_СЗПРук.Count do
        locAltValue[i] = Self.Record.Период_СЗПРук[i].Код;
      od;
      locAltChoice = Alternate('Выберите отчетный год', locAltValue);
      if (locAltChoice > 0):
        локПериод = СИС2.ФункцииДокумента.QueryRecord(ТББ_Базовый.Справочники.ПериодыРасчета, 'Код="' + locAltValue[locAltChoice] + '"');
        if (локПериод <> nil):
          Отчетность.интСЗПРук.CreateByOwner(Self.Record, локПериод, true);
        fi;
      fi;
    fi;
  end;



  --
  -- разное --

  proc ИзменитьСервисныеКоманды (locGridItem: GridItem);
    var locGridValue: Variant[];
    var locFrameName, locParentFrameName: string;
    --
    кнДобавитьСтраницу.Enabled = false;
    кнДобавитьСтраницу.Caption = ' ';
    кнДобавитьСтраницу.Font.Bold = false;
    кнДобавитьСтраницу.Hint = '';
    кнДобавитьСтраницу.OnClick = '';
    --
    кнСоздатьФайл.Enabled = false;
    кнСоздатьФайл.Caption = ' ';
    кнСоздатьФайл.Hint = '';
    кнСоздатьФайл.OnClick = '';
    --
--    кнПечать.Enabled = false;
--    кнПечать.Caption = ' ';
--    кнПечать.Hint = '';
--    кнПечать.OnClick = '';
--    --
    locGridValue = locGridItem.Value as Variant[];
    locFrameName = locGridValue[2] as String;
    locParentFrameName = locGridValue[3] as String;
    if ('фреймРеквизитыОтчета' in [locFrameName,locParentFrameName]):
      кнДобавитьСтраницу.Caption = 'Расчет';
      кнДобавитьСтраницу.Enabled = true;
      кнДобавитьСтраницу.Font.Bold = true;
      кнДобавитьСтраницу.Hint = 'Автоматическое заполнение формы';
      кнДобавитьСтраницу.OnClick = 'кнПриНажатии_Расчет';
      --
      кнСоздатьФайл.Enabled = true;
      кнСоздатьФайл.Caption = 'Создать файл';
      кнСоздатьФайл.Hint = 'Создать транзитный файл в формате .XML';
      кнСоздатьФайл.OnClick = 'кнПриНажатии_XML';
      --
--      кнПечать.Enabled = true;
--      кнПечать.Caption = 'Печать';
--      кнПечать.Hint = 'Печать с бар-кодом';
--      кнПечать.OnClick = 'кнПриНажатии_Печать';
    elsif ('фреймРаздел1' in [locFrameName,locParentFrameName]):
      кнДобавитьСтраницу.Caption = 'Добавить сведения';
      кнДобавитьСтраницу.Enabled = true;
      кнДобавитьСтраницу.Hint = 'Добавить сведения в р.1';
      кнДобавитьСтраницу.OnClick = 'кнПриНажатии_ДобавитьСведения';
    elsif ('фреймРаздел2' in [locFrameName,locParentFrameName]):
      кнДобавитьСтраницу.Caption = 'Добавить сведения';
      кнДобавитьСтраницу.Enabled = true;
      кнДобавитьСтраницу.Hint = 'Добавить сведения в р.2';
      кнДобавитьСтраницу.OnClick = 'кнПриНажатии_ДобавитьСведения';
    elsif ('фреймРаздел3' in [locFrameName,locParentFrameName]):
      кнДобавитьСтраницу.Caption = 'Добавить сведения';
      кнДобавитьСтраницу.Enabled = true;
      кнДобавитьСтраницу.Hint = 'Добавить сведения в р.3';
      кнДобавитьСтраницу.OnClick = 'кнПриНажатии_ДобавитьСведения';
    fi;
  end;



end