Class inherited МашинаРеквизитов.Базовые.блРедакторСИнтерфейсом "Форма СИоЗП" , editor Отчетность.СИоЗП;

import СИС2 classes Константы, Функции, СтроковыеФункции, ФункцииДокумента;
import ТББ_Отчетность classes CheckXml;

--{{ 2_Свойства

inclass public

  var ДатаНачалаАктуальности: date    := 01.01.2020;
  var ДатаОкончанияАктуальности: date := nil;

inobject private

  var фреймСодержание: TemplateFrame;
  var фреймРаздел1: TemplateFrame;
  var фреймРаздел2: TemplateFrame;
  var фреймРаздел3: TemplateFrame;

  var картШаблона_Раздел1: TemplateCardfile;
  var картШаблона_Раздел2: TemplateCardfile;
  var картШаблона_Раздел3: TemplateCardfile;

  var кнДобавитьСтраницу: Button;
  var кнСоздатьФайл: Button;
  var кнПечать: Button;

  var Интерфейс: Отчетность.интСИоЗП;
  var БиблиотекаСтилей: ТББ_Базовый.БиблиотекаСтилей;

  stored var ПутьЭкспорта: string;
--}}

-- 2_Конструкторы, визуализаторы0. --

-- 2_Обработчики событий шаблона0. --

inobject private

  proc шаблон_ПриСоздании (Context: Variant);
    фреймСодержание.Orientation = Template.Horizontal;
    inherited шаблон_ПриСоздании(Context);
    Template.FrameByName['фреймШапкаНавигатора'].Section[1].Row[1].Height = 5.8;
    with Template.FrameByName['фреймОписаниеРаздела'].Section[1] do
      AjustWidth = true;
      Row[1].Height = 5.8;
      CellByField['НадписьТекущегоФрейма'].Font.Size = 10;
    end;
    -- Обновление списков перечислимых полей --
    ОбновитьСписокПоля(Template.CellByField['ОКФС'], Константы.ДопустимыеОКФС);
  end;

  proc шаблон_ПриОткрытии (Create: Logical);
    БиблиотекаСтилей = ТББ_Базовый.БиблиотекаСтилей.CreateFromForm(Self);
    фреймЗакладки.ShowTabs = false;
    inherited шаблон_ПриОткрытии(Create);
  end;

  proc шаблон_ПриСчитывании;
    inherited шаблон_ПриСчитывании;
  end;


-- 2_Обработчики событий клеток шаблона0. --

inobject private

  func Поле_ПриНажатии (Cell: TemplateCell; Action: Template.ClickTypes): Logical;
    if (Cell.Contents = '+'):
      if (Cell.Owner.Name = 'секцПериод_СЗП_Заголовок'):
        ДобавитьОтчетныйМесяц;
      elsif (Cell.Owner.Name = 'секцПериод_ФондЗП_Заголовок'):
        ДобавитьОтчетныйГод(Период_ФондЗП);
      elsif (Cell.Owner.Name = 'секцПериод_СЗПРук_Заголовок'):
        ДобавитьОтчетныйГод(Период_СЗПРук);
      fi;
    elsif (Cell.Contents = 'x'):
      УдалитьОтчетныйПериод(Cell);
    fi;
  end;

  func Поле_ПриВходе(Cell :TemplateCell; Index :Integer; Action :Template.EnterTypes) :Logical;
    if (Cell.Contents = 'КТО'): ИзменитьТипОрганизации(Action);
      
    fi;
  end;

  func Поле_ПриВыводе (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): Variant;
    if (Cell.Contents = 'Период') and (Cell.Owner.Name = 'секцПериод_СЗП'):       Return ВывестиОтчетныйПериод(Cell);
    elsif (Cell.Contents = 'Период') and (Cell.Owner.Name = 'секцПериод_ФондЗП'): Return ВывестиОтчетныйПериод(Cell);
    elsif (Cell.Contents = 'Период') and (Cell.Owner.Name = 'секцПериод_СЗПРук'): Return ВывестиОтчетныйПериод(Cell);
    elsif (Cell.Contents = 'КТО'): Return ВывестиТипОрганизации;


    fi;
  end;

  func Поле_ПриВыводе_ЗаголовокОкнаФормы (Cell: TemplateCell; Value: Variant; Action: Template.OutputTypes; var Format: String): String;
    Return ПолучитьЗаголовокОкна;
  end;

-- 2_Обработчики событий прочих объектов шаблона0. --

  proc тблНавигаторФреймовПриПермещении (Sender: Grid);
    var локЭлемент: Variant[];
    Template.BeginModify;
    локЭлемент = Sender.Current.Value as Variant[];
    if (локЭлемент <> nil):
      if (локЭлемент[1] <> ИмяКорняНавигатора): -- это не корень
        ИзменитьСервисныеКоманды(Sender.Current);
      fi;
    fi;
    inherited тблНавигаторФреймовПриПермещении(Sender);
    Template.EndModify;
  end;

  proc кнПриНажатии_ДобавитьСведения (Sender: Button);
    var locGridValue: Variant[];
    var locGridName, locFrameName, locParentFrameName: string;
    if (тблНавигаторФреймов.Current <> nil):
      locGridValue = тблНавигаторФреймов.Current.Value as Variant[];
      locGridName = locGridValue[1] as String;
      locFrameName = locGridValue[2] as String;
      locParentFrameName = locGridValue[3] as String;
      if (locGridName = 'Раздел 1') or (Pos('Раздел1', locFrameName) > 0) or (Pos('Раздел1', locParentFrameName) > 0):
        ДобавитьСведения_Раздел1;
      elsif (locGridName = 'Раздел 2') or (Pos('Раздел2', locFrameName) > 0) or (Pos('Раздел2', locParentFrameName) > 0):
        --ДобавитьСведения_Раздел2;
      elsif (locGridName = 'Раздел 3') or (Pos('Раздел3', locFrameName) > 0) or (Pos('Раздел3', locParentFrameName) > 0):
        --ДобавитьСведения_Раздел3;
      fi;
    fi;
  end;



-- 2_Дополнительные команды0. --

-- 2_Вспомогательные методы0. --

  -- модификаторы  GUI --

  proc МодифицироватьШаблон (ШаблонМодифицирован: Logical = false); -- ВИД ФОРМЫ
    МодифицироватьШаблон_ФреймыРаздел1(false);
    МодифицироватьШаблон_ФреймыРаздел2(false);
    МодифицироватьШаблон_ФреймыРаздел3(false);
  end;

  proc МодифицироватьШаблон_ФреймыРаздел1(локОбновитьНавигатор: logical);
    картШаблона_Раздел1.Filter = 'фСИоЗП=' + Str(Self.Record);
    if (картШаблона_Раздел1.ColumnsCount = 0):
      картШаблона_Раздел1.Font.Size = БиблиотекаСтилей.StyleByName('Текст шаблона').Font.Size;
      картШаблона_Раздел1.Font.Bold = true;
      картШаблона_Раздел1.Align = true;
      картШаблона_Раздел1.Order = 'Работник.ФамилияФизлица;ОтчетныйПериод.Код';
      -- столбцы --
      ДобавитьСтолбецКартотеки_Раздел1_Работник_Фамилия;
      ДобавитьСтолбецКартотеки_Раздел1_Работник_Имя;
      ДобавитьСтолбецКартотеки_Раздел1_Работник_Отчество;
      ДобавитьСтолбецКартотеки_Раздел1_ОтчетныйПериод;
      --ДобавитьСтолбецКартотеки_Раздел1_СумНалУд;
      --ДобавитьСтолбецКартотеки_Раздел1_СумНалВоз;
    fi;
  end;

  proc МодифицироватьШаблон_ФреймыРаздел2(локОбновитьНавигатор: logical);
    картШаблона_Раздел2.Filter = 'фСИоЗП=' + Str(Self.Record);
    if (картШаблона_Раздел2.ColumnsCount = 0):
      картШаблона_Раздел2.Font.Size = БиблиотекаСтилей.StyleByName('Текст шаблона').Font.Size;
      картШаблона_Раздел2.Font.Bold = true;
      картШаблона_Раздел2.Align = true;
      -- столбцы --
    fi;
  end;

  proc МодифицироватьШаблон_ФреймыРаздел3(локОбновитьНавигатор: logical);
    картШаблона_Раздел3.Filter = 'фСИоЗП=' + Str(Self.Record);
    if (картШаблона_Раздел3.ColumnsCount = 0):
      картШаблона_Раздел3.Font.Size = БиблиотекаСтилей.StyleByName('Текст шаблона').Font.Size;
      картШаблона_Раздел3.Font.Bold = true;
      картШаблона_Раздел3.Align = true;
      -- столбцы --
    fi;
  end;

  proc ИзменитьНадписьТекущегоФрейма (locGridItem: GridItem);
    var locGridValue: Variant[];
    var locFrameName, locParentFrameName: string;
    locGridValue = locGridItem.Value as Variant[];
    locFrameName = locGridValue[2] as String;
    locParentFrameName = locGridValue[3] as String;
    if    'фреймРаздел1'     in [locFrameName,locParentFrameName]: НадписьТекущегоФрейма = 'Сведения о заработной плате работников';
    elsif 'фреймРаздел2'     in [locFrameName,locParentFrameName]: НадписьТекущегоФрейма = 'Сведения о фонде заработной платы';
    elsif 'фреймРаздел3'     in [locFrameName,locParentFrameName]: НадписьТекущегоФрейма = 'Сведения о заработной плате руководителей, заместителей руководителей и главного бухгалтера учреждения';
    else
      inherited ИзменитьНадписьТекущегоФрейма(locGridItem);
    fi;
  end;


  proc ДобавитьСтолбецКартотеки_Раздел1_Работник_Фамилия;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'Работник.ФамилияФизлица';
      Caption = 'Фамилия';
      Hint = '';
      Width = 0;
      MinWidth = 60;
      Alignment = Template.LeftAlign;
      FieldType = Template.ReferenceField;
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_Работник_Имя;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'Работник.ИмяФизлица';
      Caption = 'Фамилия';
      Hint = '';
      Width = 0;
      MinWidth = 60;
      Alignment = Template.LeftAlign;
      FieldType = Template.ReferenceField;
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_Работник_Отчество;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'Работник.ОтчествоФизлица';
      Caption = 'Фамилия';
      Hint = '';
      Width = 0;
      MinWidth = 60;
      Alignment = Template.LeftAlign;
      FieldType = Template.ReferenceField;
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
    end;
  end;

  proc ДобавитьСтолбецКартотеки_Раздел1_ОтчетныйПериод;
    var locOwner: TemplateCardfile;
    locOwner = картШаблона_Раздел1;
    with locOwner.AddColumn do
      FieldName = 'ОтчетныйПериод.Имя';
      Caption = 'Отчетный период';
      Hint = '';
      Width = 0;
      MinWidth = 60;
      Alignment = Template.LeftAlign;
      FieldType = Template.ReferenceField;
      Font.Size = locOwner.Font.Size;
      Font.Color = clGray;
    end;
  end;



  -- ввод / вывод в клетках --

  func ПолучитьЗаголовокОкна: string;
    var aTxt: string[];
    AddsInArray(aTxt, ПолучитьЗаголовокОкна_СтандартнаяЧасть);
    AddsInArray(aTxt, ПолучитьЗаголовокОкна_СведенияОПериоде);
    Return МассивСтрокВТекст(aTxt);
  end;

  func ПолучитьЗаголовокОкна_СтандартнаяЧасть: string[];
    Result[1] = if( (НашеУчреждение = nil), '<b->Налоговый агент не указан', '<b->' + НашеУчреждение.Имя);
    Result[2] = '<b+>' + 'Сбор информации о заработной плате работников государственных и муниципальных учреждений';
  end;

  func ПолучитьЗаголовокОкна_СведенияОПериоде: string[];
    var локВведенныеОтчетныеПериоды: ТББ_Базовый.Справочники.ПериодыРасчета[];
    var i: integer;
    var aTxt: string[];
    локВведенныеОтчетныеПериоды = ReadStructField(Период_СЗП) as ТББ_Базовый.Справочники.ПериодыРасчета[];
    for i = 1 .. LengthOfArray(локВведенныеОтчетныеПериоды) do
      if (локВведенныеОтчетныеПериоды[i] <> nil):
        AddInArray(aTxt, локВведенныеОтчетныеПериоды[i].Имя);
      fi;
    od;
    if LengthOfArray(локВведенныеОтчетныеПериоды) = 0:
      Result[1] = '<s-><s-><b+>Отчетный период: НЕ УКАЗАН';
    elsif LengthOfArray(локВведенныеОтчетныеПериоды) = 1:
      Result[1] = '<s-><s-><b+>Отчетный период: ' + aTxt[1];
    elsif LengthOfArray(локВведенныеОтчетныеПериоды) > 1:
      Result[1] = '<s-><s-><b+>Отчетные периоды: ' + ТББ_Базовый.СтроковыеФункции.МассивСтрокВСтроку(aTxt, false, ', ', false);
    fi;
  end;

  func ДобавитьОтчетныйМесяц: string;
    var locValue: string;
    var locValArray: string[2];
    var локОтчетныйПериод: ТББ_Базовый.Справочники.ПериодыРасчета;
    var локВведенныеОтчетныеПериоды: ТББ_Базовый.Справочники.ПериодыРасчета[];
    with ТББ_Отчетность.Константы do
      locValArray= [[ТипПериодаМесяц01, 'январь'], [ТипПериодаМесяц02, 'февраль'], [ТипПериодаМесяц03, 'март'],
                    [ТипПериодаМесяц04, 'апрель'], [ТипПериодаМесяц05, 'май'],     [ТипПериодаМесяц06, 'июнь'],
                    [ТипПериодаМесяц07, 'июль'],   [ТипПериодаМесяц08, 'август'],  [ТипПериодаМесяц09, 'сентябрь'],
                    [ТипПериодаМесяц10, 'октябрь'],[ТипПериодаМесяц11, 'ноябрь'],  [ТипПериодаМесяц12, 'декабрь']];
    end;
    if CmOk = ТББ_Отчетность.Библио.ВыборОтчетногоПериода(locValue, locValArray, ДатаНачалаАктуальности, ДатаОкончанияАктуальности, false):
      локОтчетныйПериод = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue);
      локВведенныеОтчетныеПериоды = ReadStructField(Период_СЗП) as ТББ_Базовый.Справочники.ПериодыРасчета[];
      if (локОтчетныйПериод <> nil) and (not локОтчетныйПериод in локВведенныеОтчетныеПериоды):
        Период_СЗП[Период_СЗП.Add] = локОтчетныйПериод;
      else
        DisplayMessage('Выбран недопустимый период. Возможно, выбранный период уже есть в списке отченых перииодов.');
      fi;
    fi;
  end;

  func ДобавитьОтчетныйГод (locStb: Subtable): string;
    var locValue: string;
    var locValArray: string[2];
    var локОтчетныйПериод: ТББ_Базовый.Справочники.ПериодыРасчета;
    var локВведенныеОтчетныеПериоды: ТББ_Базовый.Справочники.ПериодыРасчета[];
    with ТББ_Отчетность.Константы do
      locValArray= [[ТипПериодаГод]];
    end;
    if CmOk = ТББ_Отчетность.Библио.ВыборОтчетногоПериода(locValue, locValArray, ДатаНачалаАктуальности, ДатаОкончанияАктуальности, false):
      локОтчетныйПериод = Бюджет_Персонал.Календарь.ПериодПоКоду(locValue);
      локВведенныеОтчетныеПериоды = ReadStructField(locStb) as ТББ_Базовый.Справочники.ПериодыРасчета[];
      if (локОтчетныйПериод <> nil) and (not локОтчетныйПериод in локВведенныеОтчетныеПериоды):
        locStb[locStb.Add] = локОтчетныйПериод;
      else
        DisplayMessage('Выбран недопустимый период. Возможно, выбранный период уже есть в списке отченых перииодов.');
      fi;
    fi;
  end;

  func ВывестиОтчетныйПериод (Cell: TemplateCell): string;
    if (Cell.Frame > 0) and (Cell.Frame <= Cell.Owner.Subtable.Count):
      if (Cell.Owner.Subtable.Items[Cell.Frame] <> nil):
        Return (Cell.Owner.Subtable.Items[Cell.Frame] as ТББ_Базовый.Справочники.ПериодыРасчета).Имя;
      fi;
    fi;
  end;

  proc УдалитьОтчетныйПериод (Cell: TemplateCell);
    var index: integer;
    index = Cell.Frame;
    if (index > 0) and (index <= Cell.Owner.Subtable.Count):
      Cell.Owner.Subtable.Delete(index);
    fi;
  end;

  proc ИзменитьТипОрганизации (Action :Template.EnterTypes);
    var locRecord :Справочники.Росстат.КТО;
    if (Action = Template.Clear):
      КТО = nil;
    else
      locRecord = QueryRecord(Справочники.Росстат.КТО, 'Код="' +  КТО + '"');
      if cmOk = Справочники.Росстат.картКТО.ВыполнитьВыбор(locRecord):
        КТО = locRecord.Код;
      fi;
    fi;
  end;

  func ВывестиТипОрганизации: string;
    var locRecord :Справочники.Росстат.КТО;
    if (КТО <> nil):
      locRecord = QueryRecord(Справочники.Росстат.КТО, 'Код="' +  КТО + '"');
      if (locRecord <> nil):
        Return '[' + locRecord.Код + '] ' + locRecord.Имя;
      fi;
    fi;
  end;

  -- управление картотеками шаблона --


  proc ДобавитьСведения_Раздел1;
    var локДатаНачала, локДатаОкончания: date;
    var локОтчетныеПериоды: ТББ_Базовый.Справочники.ПериодыРасчета[];
    var мСотрудник: Базовый.Данные.Субъект[];
    var f, p :integer;
    var newPosition :storage[];
    var интСЗП: Отчетность.интСЗП;
    var locStorage :Storage;
    var локПериод      :ТББ_Базовый.Справочники.ПериодыРасчета;
    var локНазначение  :Бюджет_Персонал.АтрибутыСотрудника.Назначение;

    ПолучитьГраницыПериодов_Раздел1(локДатаНачала, локДатаОкончания);
    локОтчетныеПериоды = ReadStructField(Период_СЗП) as ТББ_Базовый.Справочники.ПериодыРасчета[];
    if (CmOk = ТББ_Базовый.Справочники.Субъект.картСотрудник.ВыполнитьВыбор(мСотрудник, НашеУчреждение,,,,'not ЭтоОфицер')): -- сотрудник (сотрудники) выбраны
      for f = 1 .. LengthOfArray(мСотрудник) do
        if cmOk = Служебные.СИоЗП.блУточнениеСЗП.УточнитьДобавляемыеДанные(Self.Record, мСотрудник[f], локОтчетныеПериоды, newPosition):
          for p = 1 .. LengthOfArray(newPosition) do
            locStorage = newPosition[p];
            локПериод     = locStorage.Период as ТББ_Базовый.Справочники.ПериодыРасчета;
            локНазначение = locStorage.Назначение as Бюджет_Персонал.АтрибутыСотрудника.Назначение;
            Отчетность.интСЗП.CreateByOwner(Self.Record, локПериод, локНазначение);
          od;
        fi;
      od;
    fi;
  end;

  proc ПолучитьГраницыПериодов_Раздел1 (var локДатаНачала, локДатаОкончания: date);
    var i: integer;
    for i = 1 .. Период_СЗП.Count do
      if (Период_СЗП[i] <> nil):
        if (локДатаНачала = nil):
          локДатаНачала = Период_СЗП[i].ДатаНачала;
        else
          локДатаНачала = Min([локДатаНачала, Период_СЗП[i].ДатаНачала]);
        fi;
        локДатаОкончания = Max([локДатаОкончания, Период_СЗП[i].ДатаОкончания]);
      fi;
    od;
  end;

  func Выбрать_Сотрудников (var мСотрудник: Базовый.Данные.Субъект[]; var локДатаНачалаПериодаРасчета, локДатаОкончанияПериодаРасчета: date): integer;
--    var локФильтрСотрудников: string;
--    var локПериодНачислений: ТББ_Базовый.Справочники.ПериодыРасчета;
--    var локГодСправочникаПериодов: integer;
--    локФильтрСотрудников = ТББ_Базовый.Фильтры.СложитьСтрокиФильтраПоИ([ФильтрСотрудников_ПоХарактеристике,ФильтрСотрудников_ПоГруппеНачислений]);
--    if (CmOk = ТББ_Базовый.Справочники.Субъект.картСотрудник.ВыполнитьВыбор(мСотрудник, НашеУчреждение, , , , локФильтрСотрудников)): -- сотрудник (сотрудники) выбраны
--      локДатаОкончанияПериодаРасчета = Интерфейс.ПолучитьДату_ОкончанияПериодаРасчета;
--      локПериодНачислений = Интерфейс.Получить_ПериодРасчета;-- предполагаемый расчетный период акта вычислений
--      if СтрогоеСоответствие.РасчетныхПериодов:
--        локДатаНачалаПериодаРасчета = локПериодНачислений.ДатаНачала; -- уточнение даты начала периода расчета
--        локДатаОкончанияПериодаРасчета = локПериодНачислений.ДатаОкончания; -- уточнение даты окончания периода расчета
--        Return CmOk;
--      else
--        локГодСправочникаПериодов = Year(локДатаОкончанияПериодаРасчета);
--        if (CmOk = ТББ_Базовый.Справочники.картПериоды.ВыполнитьВыборМесяца(локПериодНачислений, локГодСправочникаПериодов, nil, 'Выбор месяца расчета')): -- месяц расчета выбран
--          локДатаНачалаПериодаРасчета = локПериодНачислений.ДатаНачала; -- уточнение даты начала периода расчета
--          локДатаОкончанияПериодаРасчета = локПериодНачислений.ДатаОкончания; -- уточнение даты окончания периода расчета
--          Return CmOk;
--        fi;
--      fi;
--    fi;
  end;



  --
  -- разное --

  proc ИзменитьСервисныеКоманды (locGridItem: GridItem);
    var locGridValue: Variant[];
    var locFrameName, locParentFrameName: string;
    --
    кнДобавитьСтраницу.Enabled = false;
    кнДобавитьСтраницу.Caption = ' ';
    кнДобавитьСтраницу.Font.Bold = false;
    кнДобавитьСтраницу.Hint = '';
    кнДобавитьСтраницу.OnClick = '';
--    --
--    кнСоздатьФайл.Enabled = false;
--    кнСоздатьФайл.Caption = ' ';
--    кнСоздатьФайл.Hint = '';
--    кнСоздатьФайл.OnClick = '';
--    --
--    кнПечать.Enabled = false;
--    кнПечать.Caption = ' ';
--    кнПечать.Hint = '';
--    кнПечать.OnClick = '';
--    --
    locGridValue = locGridItem.Value as Variant[];
    locFrameName = locGridValue[2] as String;
    locParentFrameName = locGridValue[3] as String;
    if ('фреймРеквизитыОтчета' in [locFrameName,locParentFrameName]):
--      кнДобавитьСтраницу.Caption = 'Расчет';
--      кнДобавитьСтраницу.Enabled = true;
--      кнДобавитьСтраницу.Font.Bold = true;
--      кнДобавитьСтраницу.Hint = 'Автоматическое заполнение формы';
--      кнДобавитьСтраницу.OnClick = 'кнПриНажатии_Расчет';
--      --
--      кнСоздатьФайл.Enabled = true;
--      кнСоздатьФайл.Caption = 'Создать файл';
--      кнСоздатьФайл.Hint = 'Создать транзитный файл в формате .XML';
--      кнСоздатьФайл.OnClick = 'кнПриНажатии_XML';
--      --
--      кнПечать.Enabled = true;
--      кнПечать.Caption = 'Печать';
--      кнПечать.Hint = 'Печать с бар-кодом';
--      кнПечать.OnClick = 'кнПриНажатии_Печать';
    elsif ('фреймРаздел1' in [locFrameName,locParentFrameName]):
      кнДобавитьСтраницу.Caption = 'Добавить сведения';
      кнДобавитьСтраницу.Enabled = true;
      кнДобавитьСтраницу.Hint = 'Добавить сведения в р.1';
      кнДобавитьСтраницу.OnClick = 'кнПриНажатии_ДобавитьСведения';
--    elsif ('фреймРаздел2' in [locFrameName,locParentFrameName]):
--      кнДобавитьСтраницу.Caption = 'Добавить ставку';
--      кнДобавитьСтраницу.Enabled = true;
--      кнДобавитьСтраницу.Hint = 'Добавить вкладной лист р.2';
--      кнДобавитьСтраницу.OnClick = 'кнПриНажатии_ДобавитьСведения';
--    elsif ('фреймПриложение1' in [locFrameName,locParentFrameName]):
--      кнДобавитьСтраницу.Caption = 'Добавить справку';
--      кнДобавитьСтраницу.Enabled = true;
--      кнДобавитьСтраницу.Hint = 'Добавить справку о доходах';
--      кнДобавитьСтраницу.OnClick = 'кнПриНажатии_ДобавитьСведения';
    fi;
  end;



end